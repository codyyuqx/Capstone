%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R8738.tmp.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: Amir
%%CreationDate: 1/12/2018, 10:21:46 PM
%%BoundingBox: 0 0 38 38
%%HiResBoundingBox: 0 0 37.3091 37.2001
%%CropBox: 0 0 37.3091 37.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 954 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2018-01-12T22:21:06-05:00"
   xmp:CreateDate="2018-01-12T22:21:06-05:00"
   xmp:MetadataDate="2018-01-12T22:21:06-05:00"
   xmp:CreatorTool="Adobe Acrobat Pro 11.0.5"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f284d476-2eca-4974-a0c6-434076b9efe5"
   xmpMM:InstanceID="uuid:8ea48dd2-2cbc-4efa-a528-17e266f290b6"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Martin</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -37.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 37.2 li
37.3091 37.2 li
37.3091 0 li
cp
clp
-432.327 -261.382 mo
35.6726 -261.382 li
35.6726 -270.382 li
-432.327 -270.382 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
-432.327 323.618 mo
35.6726 323.618 li
35.6726 314.618 li
-432.327 314.618 li
cp
f
.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: PBAAAA+NewCenturySchlbkLT-BoldItalic Initial
ct_T42Dict begin
-0.203 -0.25 1.145 0.988
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+NewCenturySchlbkLT-BoldItalic
Type42DictBegin
[<00010000000c000c000c000c4f532f3288872d38000000cc000000606376
742000f0096c0000012c000000226670676d3244735d0000015000000162
676c7966d55d210a00001810000065d468656164e8287f60000002b40000
00366868656106d90414000002ec00000024686d747837a604cd00000310
000003dc6c6f6361acb9c3e5000006ec000001f06d617870030803700000
08dc000000206e616d6554eeb45b000008fc00000ec570726570ce23f1d1
000017c40000004a676469720000000000000000000000000002020202bc
0005000400cc00cc0000011e00cc00cc0000011e003200fa000002040803
0607050903048000002f5000204a00000000000000004c494e4f00210000
fb0202e1ff33004703df00fa000000090000000001dd02d2000000200000
0014003600960000000fff330000011a00090197000001ce000f02b2000f
02d2000f0000b800002c4bb800005058b101018e59b801ff85b800441db9
000000035f5e2db800012c2020456944b001602db800022cb800012a212d
b800032c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800042c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800052c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80006
2c2020456944b001602020457d691844b001602db800072cb800062a2db8
00082c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800092c4b535845441b2121592d
000000010000000100001929d57f5f0f3cf5001903e800000000be6e07fa
00000000c6de33a4ff33ff06047b03df0000000000000000000000000001
000002e1ff330047048fff33ff5a047b0001000000000000000000000000
000000f7011f0000011f0000011f0000014d000001900042023e001e023e
00090379003603790020011f0070019700480197ffba01f4003a025e0032
011fffc7014d0002011fffec0116ffd7023e0015023e0019023effda023e
fff9023efff3023e0000023e001f023e0040023e0000023e0000011fffec
011fffc7025e0032025e0032025e003201e1004f02ebfffc02e5ffb502f7
ffce02f700250341ffd102e5ffd702c0ffd7032f00250366ffd701bcffd7
029bffec030affd702c0ffd703b0ffd40354ffc30341002502e5ffd70341
0025031cffd702ad000102d200290341005802e5002003b0002802e5ffae
02c0000d02c0ffdf01970001025e00a10197ff9b025e004201f40000014d
004a029b00060263001d02190000029b0000020700000185ffd00263ffc1
02ad0000018500200172ff330288fff50185002003b0000002ad0000023e
00000288ff89027600000207000001e100000197001802ad001e022c001e
0341001e023effd20207ffbe0207ffed01970034025e00f90197ffe7025e
0048023effee0103ffc7023effd501e1ffc703e8005101f4003001f4ffc4
014d0017048f001402ad00010116ffe703c3001d02c0ffdf0103002f0103
003001e1003601e1002b025e007a01f4ffd103e8ffd1014d001c03b6002a
01e100000116ffe60354fffa0207ffed02c0000d014dffd4023e001e023e
ffee023e001b023e0011025e00f901f4ffe2014d002102ebfffe019c002f
01e1ffdd025e003202ebfffe014d002f01900056025e00320158ffef0158
0003014d007b02adff80028a0019011f0039014dffeb015800130164002a
01e1ffe1035d0011035d0011035d002301e1000002e5ffb502e5ffb502e5
ffb502e5ffb502e5ffb502e5ffb50379ffaa02f7002502e5ffd702e5ffd7
02e5ffd702e5ffd701bcffd701bcffd701bcffd701bcffd70341ffd10354
ffc30341002503410025034100250341002503410025025e004103410023
0341005803410058034100580341005802c0000d02e5ffd7023effa5029b
0006029b0006029b0006029b0006029b0006029b0006032fffee02190000
020700000207000002070000020700000185002001850020018500150185
001f023e000002ad0000023e0000023e0000023e0000023e0000023e0000
025e0032023e000002ad001e02ad001e02ad001e02ad001e0207ffbe0288
ff890207ffbe0185002002c0ffd701850018014d003c014d0043014d0091
014d006f014d0024014d000f02640006030000220225000a01ee001a0337
001902c9000e025e003200a7ff5a0225000a02c90019011200020225000e
0225000f0225001d0225001d01ee0012011f000001f4000002adffba02ad
ffba000000050005000a000a000a000a000a000a000a000a000a000a000a
000a000a001c00780078015201a4028603e604440534066206d007e80914
09cc09cc09cc09cc09cc09cc09cc0a320b1c0be40c620d1a0d9c0ea00f4c
0fa60fa6105a10ea1198122412fc137c14c215c616ae1744180618721930
1930193019301930193019301930193019301a461b4c1c4c1d661e521f2c
20d821b42288238e24bc253c265e2734280828e029de2a442ba02c462d3e
2dea2ee6308e317a32983298329832983298329832983298329832983298
3298329832983298329832983298329832ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea32ea
32ea32ea32ea32ea32ea32ea32ea32ea32ea0001000000f7008f00060000
0000000100000000000a0000020002e0000000000000000c009600010000
0000000003d300000001000000000003002403d300010000000000040024
03f700010000000000060024041b00010000000000070066043f00030001
0409000007a604a5000300010409000100320c4b0003000104090002000e
0c7d000300010409000300480c8b000300010409000400480cd300030001
0409000600480d1b000300010409000700cc0d6350617274206f66207468
65206469676974616c6c7920656e636f646564206d616368696e65207265
616461626c65206f75746c696e65206461746120666f722070726f647563
696e6720746865205479706566616365732070726f766964656420697320
636f70797269676874656420a92031393835202d2032303039204c696e6f
7479706520476d62482c207777772e6c696e6f747970652e636f6d2e2041
6c6c207269676874732072657365727665642e205468697320736f667477
617265206973207468652070726f7065727479206f66204c696e6f747970
6520476d62482c20616e64206d6179206e6f7420626520726570726f6475
6365642c20757365642c20646973706c617965642c206d6f646966696564
2c20646973636c6f736564206f72207472616e7366657272656420776974
686f7574207468652065787072657373207772697474656e20617070726f
76616c206f66204c696e6f7479706520476d62482e202054686520646967
6974616c6c7920656e636f646564206d616368696e65207265616461626c
6520736f66747761726520666f722070726f647563696e67207468652054
7970656661636573206c6963656e73656420746f20796f7520697320636f
7079726967687465642028632920313938352c20313938372c2031393838
2c20313939312c20313939322c20313939372c20313939382c2031393939
2041646f62652053797374656d732e20416c6c2052696768747320526573
65727665642e205468697320736f66747761726520697320746865207072
6f7065727479206f662041646f62652053797374656d7320496e636f7270
6f726174656420616e6420697473206c6963656e736f72732c20616e6420
6d6179206e6f7420626520726570726f64756365642c20757365642c2064
6973706c617965642c206d6f6469666965642c20646973636c6f73656420
6f72207472616e7366657272656420776974686f75742074686520657870
72657373207772697474656e20617070726f76616c206f662041646f6265
2e204e65772043656e74757279205363686f6f6c626f6f6b206973206120
74726164656d61726b206f66204c696e6f7479706520476d624820616e64
206d6179206265207265676973746572656420696e206365727461696e20
6a7572697364696374696f6e732e20546869732074797065666163652069
73206f726967696e616c20617274776f726b206f66204c696e6f74797065
2044657369676e2053747564696f2e205468652064657369676e206d6179
2062652070726f74656374656420696e206365727461696e206a75726973
64696374696f6e732e434d4f4444422b4e657743656e747572795363686c
626b4c542d426f6c644974616c6963434d4f4444422b4e657743656e7475
72795363686c626b4c542d426f6c644974616c6963434d4f4444422b4e65
7743656e747572795363686c626b4c542d426f6c644974616c69634e6577
2043656e74757279205363686f6f6c626f6f6b2069732061207472616465
6d61726b206f66204c696e6f7479706520476d624820616e64206d617920
6265207265676973746572656420696e206365727461696e206a75726973
64696374696f6e732e00500061007200740020006f006600200074006800
650020006400690067006900740061006c006c007900200065006e006300
6f0064006500640020006d0061006300680069006e006500200072006500
61006400610062006c00650020006f00750074006c0069006e0065002000
6400610074006100200066006f0072002000700072006f00640075006300
69006e006700200074006800650020005400790070006500660061006300
650073002000700072006f00760069006400650064002000690073002000
63006f007000790072006900670068007400650064002000a90020003100
39003800350020002d002000320030003000390020004c0069006e006f00
7400790070006500200047006d00620048002c0020007700770077002e00
6c0069006e006f0074007900700065002e0063006f006d002e0020004100
6c006c002000720069006700680074007300200072006500730065007200
7600650064002e0020005400680069007300200073006f00660074007700
61007200650020006900730020007400680065002000700072006f007000
650072007400790020006f00660020004c0069006e006f00740079007000
6500200047006d00620048002c00200061006e00640020006d0061007900
20006e006f007400200062006500200072006500700072006f0064007500
6300650064002c00200075007300650064002c0020006400690073007000
6c0061007900650064002c0020006d006f00640069006600690065006400
2c00200064006900730063006c006f0073006500640020006f0072002000
7400720061006e0073006600650072007200650064002000770069007400
68006f007500740020007400680065002000650078007000720065007300
730020007700720069007400740065006e00200061007000700072006f00
760061006c0020006f00660020004c0069006e006f007400790070006500
200047006d00620048002e00200020005400680065002000640069006700
6900740061006c006c007900200065006e0063006f006400650064002000
6d0061006300680069006e00650020007200650061006400610062006c00
6500200073006f00660074007700610072006500200066006f0072002000
700072006f0064007500630069006e006700200074006800650020005400
7900700065006600610063006500730020006c006900630065006e007300
65006400200074006f00200079006f007500200069007300200063006f00
700079007200690067006800740065006400200028006300290020003100
3900380035002c00200031003900380037002c0020003100390038003800
2c00200031003900390031002c00200031003900390032002c0020003100
3900390037002c00200031003900390038002c0020003100390039003900
2000410064006f00620065002000530079007300740065006d0073002e00
200041006c006c0020005200690067006800740073002000520065007300
650072007600650064002e0020005400680069007300200073006f006600
740077006100720065002000690073002000740068006500200070007200
6f007000650072007400790020006f0066002000410064006f0062006500
2000530079007300740065006d007300200049006e0063006f0072007000
6f0072006100740065006400200061006e00640020006900740073002000
6c006900630065006e0073006f00720073002c00200061006e0064002000
6d006100790020006e006f00740020006200650020007200650070007200
6f00640075006300650064002c00200075007300650064002c0020006400
6900730070006c0061007900650064002c0020006d006f00640069006600
6900650064002c00200064006900730063006c006f007300650064002000
6f00720020007400720061006e0073006600650072007200650064002000
77006900740068006f007500740020007400680065002000650078007000
720065007300730020007700720069007400740065006e00200061007000
700072006f00760061006c0020006f0066002000410064006f0062006500
2e0020004e00650077002000430065006e00740075007200790020005300
630068006f006f006c0062006f006f006b00200069007300200061002000
740072006100640065006d00610072006b0020006f00660020004c006900
6e006f007400790070006500200047006d0062004800200061006e006400
20006d006100790020006200650020007200650067006900730074006500
720065006400200069006e0020006300650072007400610069006e002000
6a007500720069007300640069006300740069006f006e0073002e002000
540068006900730020007400790070006500660061006300650020006900
730020006f0072006900670069006e0061006c0020006100720074007700
6f0072006b0020006f00660020004c0069006e006f007400790070006500
2000440065007300690067006e002000530074007500640069006f002e00
20005400680065002000640065007300690067006e0020006d0061007900
2000620065002000700072006f0074006500630074006500640020006900
6e0020006300650072007400610069006e0020006a007500720069007300
640069006300740069006f006e0073002e0043004d004f00440044004200
2b004e0065007700430065006e0074007500720079005300630068006c00
62006b004c00540052006500670075006c006100720043004d004f004400
440042002b004e0065007700430065006e00740075007200790053006300
68006c0062006b004c0054002d0042006f006c0064004900740061006c00
6900630043004d004f004400440042002b004e0065007700430065006e00
74007500720079005300630068006c0062006b004c0054002d0042006f00
6c0064004900740061006c006900630043004d004f004400440042002b00
4e0065007700430065006e0074007500720079005300630068006c006200
6b004c0054002d0042006f006c0064004900740061006c00690063004e00
650077002000430065006e00740075007200790020005300630068006f00
6f006c0062006f006f006b00200069007300200061002000740072006100
640065006d00610072006b0020006f00660020004c0069006e006f007400
790070006500200047006d0062004800200061006e00640020006d006100
790020006200650020007200650067006900730074006500720065006400
200069006e0020006300650072007400610069006e0020006a0075007200
69007300640069006300740069006f006e0073002e000000b800002b00ba
0001000100022b01ba0002000100022b01be00020025001e00180011000a
00082b00be0001006600540041002f001c00082b00ba0003000700072bb8
000020457d691844000000>
[15961 10109 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1296 75 <00020020fff1015902e10023002f0121bb00080002001800042b41030096
000800015dba002400180008111239b800242f41030099002400015db900
2a0002fcba00010024002a111239b80031dc00b800004558b800272f1bb9
0027000f3e59b800004558b800132f1bb9001300033e59ba000100130027
111239b9000a0001fc410f0097000a00a7000a00b7000a00c7000a00d700
0a00e7000a00f7000a00075d41150007000a0017000a0027000a0037000a
0047000a0057000a0067000a0077000a0087000a0097000a000a71410500
a6000a00b6000a000271b8002710b8002ddc41050069002d0079002d0002
71410f0098002d00a8002d00b8002d00c8002d00d8002d00e8002d00f800
2d00075d410d0008002d0018002d0028002d0038002d0048002d0058002d
000671303113250e05151433323637170e0323222e0235343e043534262b
013734363332161514062322262b01061e291b10070211143623251a3133
361f12251d120c1315130c17201c89302323303023233001d20b5c805631
1b0b04133c351a263c2a170b1721150e343f433d2e0a1510e72330302323
30300000>PBAAAA+NewCenturySchlbkLT-BoldItalic AddT42Char 
2 7204 88 <0001001efff101f001dd002e00d7bb00060002002500042bbb0019000200
1300042bba00010025001911123941030096000600015db8001910b8000e
dc41030099001300015db8001910b80030dc00b800004558b800012f1bb9
0001000b3e59b800004558b800162f1bb90016000b3e59b800004558b800
202f1bb9002000033e59b900090001fc410f0097000900a7000900b70009
00c7000900d7000900e7000900f7000900075d4115000700090017000900
270009003700090047000900570009006700090077000900870009009700
09000a71410500a6000900b60009000271303113370e0315141633323e02
35342e0235343633321615140e0423222e0235343e023534262b0129f21c
26170a271e203e301d171c17281b252a0f21314357351b362b1c14191417
201401d20b597c53310f2020324a54221319171d171c23332321575a5743
2a112436261e504d3c0915100000>PBAAAA+NewCenturySchlbkLT-BoldItalic AddT42Char 
1 0 0 <00000000000000000000>PBAAAA+NewCenturySchlbkLT-BoldItalic AddT42Char 
PBAAAA+NewCenturySchlbkLT-BoldItalic /CharStrings get begin
/i 75 def
/v 88 def
end
PBAAAA+NewCenturySchlbkLT-BoldItalic /Encoding get
dup 105 /i put
dup 118 /v put
pop
end
%ADOEndSubsetFont
/BEHKNU+NewCenturySchlbkLT-BoldItalic /PBAAAA+NewCenturySchlbkLT-BoldItalic findfont ct_VMDictPut
/BEHKNU+NewCenturySchlbkLT-BoldItalic*1 
[105{/.notdef}rp /i 12{/.notdef}rp /v 137{/.notdef}rp]
BEHKNU+NewCenturySchlbkLT-BoldItalic nf
BEHKNU+NewCenturySchlbkLT-BoldItalic*1 [9 0 0 -9 0 0 ]msf
-206.067 320.618 mo
(viii)
[4.98151 3.47855 3.53979 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+TimesLTStd-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+TimesLTStd-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright 1985, 1987, 1989, 1990, 1993, 1997, 1998, 1999, 2002 Adobe Systems Incorporated. All rights reserved. Copyright 1985, 1987, 1989, 1990, 1993, 1997, 1998, 1999, 2002 Linotype GmbH. All rights reserved. Times is a trademark of Linotype Corp. registered in the U.S. Patent and Trademark Office and may be registered in certain other jurisdictions in the name of Linotype Corp. or its licensee Linotype GmbH.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (TimesLTStd-Bold) def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 65 /A put
dup 76 /L put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
def
/FontBBox {-168 -218 1012 935} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 676 691 461 473] def
/OtherBlues [268 275 -206 -203] def
/FamilyBlues [-14 -0 662 676 450 460 683 683] def
/FamilyOtherBlues [262 270 -218 -217] def
/BlueScale 0.0437917 def
/StdHW [44] def
/StdVW [139] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/A <1C60D8A8C9B6079F1E726295E14B9D3F70CD5E0B99FB5C541892407EEE31
3575E0BC3586F119054623CFFC1539933CC204B2F5B50CDB16C1A47827495E2D
EE496A0F16B7095E9F1E3DBB899EFB12534C6D9378D278FEEE7861E2DFF81C84
E57E28074784DF150564816D806C9503838197FA5E0E96901B050C38513FC794
0F74497685> |-
/L <1C60D8A8C9B64EDF8815C1AD7B5B26AB26BCBC091C6DF6670E573A3698A4
87FA937A76353FC8A27E3EC6331795AB1229A5461F60BB5E5612255C1FB1246C
71D14F65C2F7FA78B27A3178021FAADA0B0D5CF511ECD1587461B88F5173C1FF
2AE3AD6C2F10522891F194F1CB> |-
/a <1C60D8A8C9B7A73D33D33BBE9B0166BDE0A830288DCA9DD5D2F84B50BE4A
77E8EF93047C2F1EA3876C059DBAF433C4C00EF1CEA5609DAB4FA0A543A1D180
430D7781F7AD17E286ADDF30C623336A1A9E3C9377B2AEB4B64817E19DAD816F
332F4903EB170DE772D9A468D3BC110E6CF63D7C296A79837181E402E85AB03C
5A94FE1FAEFDDF92723C2437289A4858A4FDA105FD46D04F3AD4BE862F2E112B
563EA7E4F5589E35> |-
/c <1C60D8A8C9B77FE24419C765668C66977042CF452C7EA7480CB02D365B26
29D676E34D83576C5FE87369A71FD3EF45D609A8F3161A64202F408618C8F2A9
FDE86527018B8EBFF86424141A2A5FB62ECB45623F7DD7F8B87BF53A09> |-
/e <1C60D8A8C9B77FE24404D6FC75C46E8B158C79295EE152CB85114B677694
1B6C41FE0BDF379B261CABD6DE32A67555E447EFF8EAD7CA0095F2F22A6BCFA8
DEF10B4E32C2977CA0F7C907347449072B91CF1BD86DDFBB079C5CAC1F8F3F38
7833C7E0FB3A00> |-
/g <1C60D8A8C9B7A73DB58EABCA6C0064AF518C80BFA489A369494835359FC8
9787CF7B465B37BD705A259053FFF8B54A83FB2D85D97986EA7B9F21109C6776
7172C997A3A7215847C8652E0CADEB1C61037F14C530E056D1C06354BFC62264
FA31C3D445BE23B68783941F2AC933B5EA2E22F7871B97DA001639A008C03E83
8F132EF7FB0858D61F3EB30F083334C8FD6B9B403FC8392B8A23E09224AFF030
D678EDA64C348D9C2445A7CCF9FE1FA972106BAA1D60EF646A65EFC79C54201B
325716628F8E44B54C6C66DE8D94302FAAA403C47F8EC942B460E93F7782BA7C
7E710CA91AC726A7F312059E299B630C723F99AA5139AFF0967B6F0B9FF176AF
0B0496A99FAF68777699CF25F4C68AF590677CF3347B1181F19D1A0DC83F7DB6
EAB3DC3D0E9FEA58581CD9CA0B44E195BAA4677F11E992ACBF449729F70304B1
DF4F777F0CA2BC1C9B371855DA9AF968BE9D7871E2118ABAE2C579D7C1FC59D8
F616725984503DFD73F4F90496D5B1CF81B938C73B0C5D22077B519A75CBF1B7
8033DC844CD968FEA55EB7A7E018AA4E6AB190> |-
/i <1C60D8A8C9B854D088BE03066611142D35B96CDBC6AC69CE7D67EDB1CAB5
0A1BDB54D546537954FB6FE6BFE1A7C6E1B168CA0C5B35D41BCA3CE6C73BD1DB
23AC090B997C896D226BCF70833B6C3FAB41C01E4EB05360912DD6B00F8F9075
C86B55E1B4871965F61317243267FDC085> |-
/n <1C60D8A8C9B7EF3257330F56C94494157A7EF7FFCBD73F84D262F8E7D019
59AC25EC004852A9D2EE4AC35B0916692F432F5CC4BA24475C1585C14E0905AC
F072D8A88A9283F858EDF4B1C6BED04E509F9B3592B943768FA40BBE472F197C
351FA9B31E247A2F6126072E89ED92526AAFBE6B29CBD01535D22319B495F8DE
9EC03DE5FC3D1D349F08180CDD8EC5F746CB90B201AAB7B408BF78D5D20442C8
7E190839C6924F5E937788F15A694C0C87> |-
/o <1C60D8A8C9B7A73D33B29FF9A975322B3362DC44B144D77C19E1494695DA
7F3C9EE16429993BFE81D3F80062EB85C1F3EBBAC1E20BAD4CD6ED18D4A00CBE
2E6A68F1C32B265462F7B12A0C041CD785918FFA259E1C60EBA89CDB> |-
/r <1C60D8A8C9B77FE2B2290770D44CC430BF6AF796D77E767E49BAE099A5CB
5CDA55620A37F79E62037F4D57C9543EDF0B898CB31FD6F92D81D55915B5909F
3C395570A34E68F5876F9DF76D8F93A854E34A3944108FBD510D0C1B0672F3F6
B0450013B110579A4125BD5DC761B4F03953B548BD8D95CF049B49F1C5AA50C0
810BC4DE95AC7F525C> |-
/s <1C60D8A8C9B7361F88137B04082E6E4F66FAC966F3D70C7F8A7BAA3FB50A
BCFE1895C766D14BA2A7C0062F3CA804FBF9ED343E5E6B872363DD7FC3B56945
804944B66762AEE06AB1789C738ACCF75A672002EC5F1B0AB8D8D1DEE2C1A384
10197DD818692C68FF72064D07D83C500C31447012EE660FBEE2554E562FFF1D
8FF028C865302E6BAA2336649B7721E910922BE3185F1D5BC192C216BAE3CB83
868765AAA94722B91B6663685F330714D22E4EE5C955D69007AF3553C16301F6
F1B75A3B75C2DD57C84F421ED21D1A27D5DDA15DE8BB35D015CD61D04289> |-
/t <1C60D8A8C9B81F2CB2ACA02E0CECC7A7088ABA14D8BB1C717E776D9EDDA4
1B759D267E40E8E459C7F73ADF1E69682DC406BFDF457393EAAE2ED0FA699485
621F5B6FC1B505550703C8328A533D11F51C3D76> |-
/v <1C60D8A8C9B7A73DDC2846ECACAA9ED3D8CA193E16B3F0DC5E9A367A0D50
4796D918E9EDFBD1E9E601D210DB8791EFB6D4F8C038151565274C251BB98F76
30E52DFCDF3905935F003BF0137E96FEC5546A6F64737979622AA5FCA67554C6
9A2A3F896D63DE889E51F2D715B5> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BEHKNV+TimesLTStd-Bold /HIBBAA+TimesLTStd-Bold findfont ct_VMDictPut
/BEHKNV+TimesLTStd-Bold*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 10{/.notdef}rp /L 20{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /.notdef /i 
4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /.notdef 
/v 137{/.notdef}rp]
BEHKNV+TimesLTStd-Bold nf
BEHKNV+TimesLTStd-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
-270.087 -223.702 mo
(Associative Learning)
[11.5455 6.17984 6.2309 8.00235 7.10858 4.45923 8.00235 5.33691 4.4592 8.00235 7.10861 3.95966 
10.6678 7.10858 8.00235 7.10858 8.89609 4.45923 8.89612 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+HelveticaLT Initial
ct_T42Dict begin
-0.164 -0.223 1 0.93
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+HelveticaLT
Type42DictBegin
[<00010000000c000c000c000c4f532f325ef4d2ac000000cc000000566376
7420058d00f4000001240000001c6670676dc960b19b0000014000000153
676c796630e3311d000012b800002ad468656164d27bb423000002940000
00366868656106e80357000002cc00000024686d7478e16025d2000002f0
000003986c6f6361c45db8b600000688000001ce6d61787002f802820000
0858000000206e616d658655535900000878000009f5707265707ac1d8e3
000012700000004667646972000000000000000000000000000101b90190
0005000400cc00cc0000011e00cc00cc0000011e003200fa000002000503
040000020004800000270000000000000000000000004c494e4f00000020
fb0202ceff31004503a300e1000000010000000000000014004c0056005b
00000013ff31000d0119000b020b000f02ce0013b800002c4bb800095058
b101018e59b801ff85b800441db9000900035f5e2db800012c2020456944
b001602db800022cb800012a212db800032c2046b003254652582359208a
208a49648a204620686164b004254620686164525823658a592f20b00053
586920b000545821b040591b6920b000545821b0406559593a2db800042c
2046b00425465258238a592046206a6164b0042546206a61645258238a59
2ffd2db800052c4b20b0032650585158b080441bb04044591b21212045b0
c05058b0c0441b2159592db800062c2020456944b001602020457d691844
b001602db800072cb800062a2db800082c4b20b003265358b0801bb04059
8a8a20b003265358b0022621b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b80003265358b0032545b8014050582321b801402321
1bb003254523212321591b2159442db800092c4b535845441b2121592d00
0001000000040000841021885f0f3cf5001903e800000000b805b8420000
0000b805b842ff5aff1f03e803a300000000000000000000000000010000
03a3ff1f000003f7ff5aff5a03e800010000000000000000000000000000
00e6011600000116000001630046022c001c022c002003790027029b002c
00bf003b014d0044014d0022018500270248002701160057014d002c0116
00570116ffef022c0025022c0065022c001a022c0022022c0019022c0020
022c0026022c0025022c0026022c002a0116005701160057024800300248
002702480030022c003803f70093029b000e029b004a02d2002c02d20051
029b005602630056030a003002d2004d0116005b01f40011029b004c022c
004c0341004902d2004c030a0027029b0056030a002702d20058029b0031
0263000e02d2004f029b001403b00010029b0013029b000e026300170116
003f0116ffef0116001c01d5fff2022c0000014d000e022c0024022c003a
01f4001e022c0023022c00280116000e022c0028022c004100de004300de
fff001f4004300de004303410041022c0041022c0023022c003a022c0023
014d004d01f400200116000e022c004401f4000802d2000e01f4000b01f4
000b01f4001f014e002a0104005e014e002a0248003d022c001800de0035
022cfff5014d001a03e80073022c002b022c002b014d001503e80007029b
0031014d005803e800240263001700de004100de0035014d0026014d001a
015e0012022c000003e80000014dfffc03e8002e01f40020014d005803b0
002301f4001f029b000e014d0076022c0033022c0021022c001c022c0003
0104005e022c002b014d002802e1fff201720018022c00610248002702e1
fff2014d000a0190003602480027014d0004014d0005014d007a02420044
021900120116004d014d002d014d002b016d0019022c0061034200490342
002b0342002d0263005b029b000e029b000e029b000e029b000e029b000e
029b000e03e8000802d2002c029b0056029b0056029b0056029b00560116
fff30116005b0116fffa0116000d02d2000002d2004c030a0027030a0027
030a0027030a0027030a002702480027030a002702d2004f02d2004f02d2
004f02d2004f029b000e029b005602630043022c0024022c0024022c0024
022c0024022c0024022c00240379002401f4001e022c0028022c0028022c
0028022c00280116fff30116005f0116fffa0116000d022c0023022c0041
022c0023022c0023022c0023022c0023022c0023024800270263001c022c
0044022c0044022c0044022c004401f4000b022c003a01f4000b0116005a
00a7ff5a01f4000e01f4000e014d000d014d0079014d004b014d001f014d
0049014d0015022cffec0116005f00deffec0248002700000005000a000a
000a000a000a000a000a005e00b300b300f000f001050122014101e2020f
028d037a03c5045c0533055f067c075607890789078907ac07ac07ac07ac
07ea08a2094a09af09f30a2c0b050b5e0b810b810bae0bd80c740cd70d1d
0d500da10df30e520e670e9a0ed10f0b0f540f540f540f540f540f540f54
0f540f540fbe100a1045108b10d81100115c119311af11db11fc121f1267
12ac12f4133e138a13b2140f1439146c148314a514c014f0150a150a150a
150a150a150a150a150a150a150a150a150a150a150a150a150a150a150a
150a153b153b153b153b153b153b153b153b153b153b153b153b153b153b
153b153b153b153b153b153b153b153b153b153b153b153b153b153b153b
153b153b153b153b153b153b153b153b153b156a156a156a156a156a156a
156a156a156a156a156a156a156a156a156a156a156a156a156a156a156a
156a156a156a156a156a156a156a156a156a156a156a156a156a156a156a
156a156a156a156a156a156a156a156a156a156a156a156a156a156a156a
156a156a156a156a156a156a156a156a156a156a156a156a156a156a156a
156a156a156a156a156a156a156a156a156a156a156a156a156a156a156a
156a156a00000001000000e60076000700000000000200000000000a0000
0200020a000000000000000c0096000100000000000001fc000000010000
00000003001201fc00010000000000040012020e00010000000000060012
0220000100000000000700dd0232000300010409000003f8030f00030001
04090001002407070003000104090002000e072b00030001040900030024
073900030001040900040024075d00030001040900060024078100030001
0409000701ba07a550617274206f6620746865206469676974616c6c7920
656e636f646564206d616368696e65207265616461626c65206f75746c69
6e65206461746120666f722070726f647563696e67207468652054797065
66616365732070726f766964656420697320636f70797269676874656420
28632920313938352c20313938372c20313938392c20313939302c203139
39372c20313939382c20313939392c2032303033204c696e6f7479706520
4c69627261727920476d62482c207777772e6c696e6f747970652e636f6d
2e20416c6c207269676874732072657365727665642e205468697320736f
667477617265206973207468652070726f7065727479206f66204c696e6f
74797065204c69627261727920476d62482c20616e64206d6179206e6f74
20626520726570726f64756365642c20757365642c20646973706c617965
642c206d6f6469666965642c20646973636c6f736564206f72207472616e
7366657272656420776974686f7574207468652065787072657373207772
697474656e20617070726f76616c206f66204c696e6f74797065204c6962
7261727920476d62482e20436f707972696768742028632920313938352c
20313938372c20313938392c20313939302041646f62652053797374656d
7320496e636f72706f72617465642e20416c6c2072696768747320726573
65727665642e434d4f4445452b48656c7665746963614c54434d4f444545
2b48656c7665746963614c54434d4f4445452b48656c7665746963614c54
48656c76657469636120697320612074726164656d61726b206f66204865
6964656c62657267657220447275636b6d61736368696e656e2041472077
68696368206d6179206265207265676973746572656420696e2063657274
61696e206a7572697364696374696f6e732c206578636c75736976656c79
206c6963656e736564207468726f756768204c696e6f74797065204c6962
7261727920476d62482c20612077686f6c6c79206f776e65642073756273
696469617279206f662048656964656c62657267657220447275636b6d61
736368696e656e2041472e00500061007200740020006f00660020007400
6800650020006400690067006900740061006c006c007900200065006e00
63006f0064006500640020006d0061006300680069006e00650020007200
650061006400610062006c00650020006f00750074006c0069006e006500
20006400610074006100200066006f0072002000700072006f0064007500
630069006e00670020007400680065002000540079007000650066006100
6300650073002000700072006f0076006900640065006400200069007300
200063006f00700079007200690067006800740065006400200028006300
2900200031003900380035002c00200031003900380037002c0020003100
3900380039002c00200031003900390030002c0020003100390039003700
2c00200031003900390038002c00200031003900390039002c0020003200
30003000330020004c0069006e006f00740079007000650020004c006900
62007200610072007900200047006d00620048002c002000770077007700
2e006c0069006e006f0074007900700065002e0063006f006d002e002000
41006c006c00200072006900670068007400730020007200650073006500
72007600650064002e0020005400680069007300200073006f0066007400
770061007200650020006900730020007400680065002000700072006f00
7000650072007400790020006f00660020004c0069006e006f0074007900
7000650020004c00690062007200610072007900200047006d0062004800
2c00200061006e00640020006d006100790020006e006f00740020006200
6500200072006500700072006f00640075006300650064002c0020007500
7300650064002c00200064006900730070006c0061007900650064002c00
20006d006f006400690066006900650064002c0020006400690073006300
6c006f0073006500640020006f00720020007400720061006e0073006600
65007200720065006400200077006900740068006f007500740020007400
680065002000650078007000720065007300730020007700720069007400
740065006e00200061007000700072006f00760061006c0020006f006600
20004c0069006e006f00740079007000650020004c006900620072006100
72007900200047006d00620048002e00200043006f007000790072006900
6700680074002000280063002900200031003900380035002c0020003100
3900380037002c00200031003900380039002c0020003100390039003000
2000410064006f00620065002000530079007300740065006d0073002000
49006e0063006f00720070006f00720061007400650064002e0020004100
6c006c002000720069006700680074007300200072006500730065007200
7600650064002e0043004d004f004400450045002b00480065006c007600
650074006900630061004c00540052006500670075006c00610072004300
4d004f004400450045002b00480065006c00760065007400690063006100
4c00540043004d004f004400450045002b00480065006c00760065007400
6900630061004c00540043004d004f004400450045002b00480065006c00
7600650074006900630061004c005400480065006c007600650074006900
63006100200069007300200061002000740072006100640065006d006100
72006b0020006f0066002000480065006900640065006c00620065007200
670065007200200044007200750063006b006d0061007300630068006900
6e0065006e0020004100470020007700680069006300680020006d006100
790020006200650020007200650067006900730074006500720065006400
200069006e0020006300650072007400610069006e0020006a0075007200
69007300640069006300740069006f006e0073002c002000650078006300
6c00750073006900760065006c00790020006c006900630065006e007300
6500640020007400680072006f0075006700680020004c0069006e006f00
740079007000650020004c00690062007200610072007900200047006d00
620048002c00200061002000770068006f006c006c00790020006f007700
6e0065006400200073007500620073006900640069006100720079002000
6f0066002000480065006900640065006c00620065007200670065007200
200044007200750063006b006d00610073006300680069006e0065006e00
2000410047002e000000bb00010003000200002b2bbd00030036002a001e
001200082bbd00010036002a001e001200082bbd00020036002a001e0012
00082bba0004000500072bb8000020457d691844000000>
[10965 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 10 1 <00000000000000000000>QJJAAA+HelveticaLT AddT42Char 
1 480 13 <0001002c00e8012101420003001100bb00030002000000042bb800031030
31252335330121f5f5e85a00>QJJAAA+HelveticaLT AddT42Char 
1 964 17 <000100650000016702bf000a0030bb00000003000100042b00b800092fb8
00004558b800002f1bb9000000043e59bb00040001000300042bb8000410
303121231123353e03373301675ea42b3e2c1d0b4501f346030a1b332b00
>QJJAAA+HelveticaLT AddT42Char 
1 1054 18 <0001001a000001fb02bf002f0074bb000c0003002500042bb8000c10b800
18d04105007a0025008a002500025d410f00090025001900250029002500
39002500490025005900250069002500075db8000c10b80031dc00b80000
4558b800192f1bb9001900043e59bb00070001002a00042bb8000710b800
1910b900170002fc303113343e0433321e0215140e020f010e0307211521
3e033f013e0335342e0223220e02072c192a343633132e503c221d334527
49242e1a0c01017efe1f02192c3b235d1c2f23130e21352732381c070101
c33952382211061d364e312f46362b15281427241e0a5337554333153610
1e242f23152d251828383b12>QJJAAA+HelveticaLT AddT42Char 
1 1306 19 <00010022ffed020a02bf0046011cbb00340003003300042bb8003410bb00
1d0003000800042bb8001d104105007a0008008a000800025d410f000900
0800190008002900080039000800490008005900080069000800075dba00
230008001d111239ba003e0008001d111239b8003e2f4105007a003e008a
003e00025d410f0009003e0019003e0029003e0039003e0049003e005900
3e0069003e00075db900260003fcb80048dc00b800332fb800004558b800
2b2f1bb9002b00043e59bb00180001000d00042bb8001810bb0003000100
4300042bb8000310ba002300430003111239b8002b10b900390001fc410f
000700390017003900270039003700390047003900570039006700390007
5d4105007600390086003900025db8004310b80046d0b800462f3031131e
0133323e0235342e0223220e020723343e0233321e0215140e0207151e01
15140e02232226272e0327331e0333323e0235342e0223220623e00b180b
193125170b1d33272f351b090156133259453351371e111b200e33421d3d
604327411a1d27170c025b010a203a3122382817223339160a140a019001
010b1b2c2110262217213034122751432b1c314428223223160402114c47
2b523f26110e0f2d353c1e19362e1e1424321e2c341a0701>QJJAAA+HelveticaLT AddT42Char 
1 1780 20 <000200190000020b02bf0003000e005ebb000c0003000100042bb8000c10
b80004d0b8000110b80006d0b8000c10b80010dc00b8000a2fb800004558
b800052f1bb9000500043e59bb000c0001000400042bb8000c10b80000d0
ba00030005000a111239b8000410b80007d0303137331123131523352135
01331133156ae2025a58fecd01424967f7013ffe75abab5601befe384c00
>QJJAAA+HelveticaLT AddT42Char 
1 1930 21 <00010020ffed020202b0002800b6bb00080003001b00042bb80008104105
007a001b008a001b00025d410f0009001b0019001b0029001b0039001b00
49001b0059001b0069001b00075db8002adc00b800122fb800004558b800
0d2f1bb9000d00043e59bb00260002002700042bb8002610bb0003000100
2000042bb8000310ba000000200003111239b8000d10b900160001fc410f
000700160017001600270016003700160047001600570016006700160007
5d4105007600160086001600025d3031133e0133321e0215140e0223222e
0227331e0133323e0235342e02232206072713211521931741302b534128
12366552234a412f065b07523c22372615182a39212643194c35016cfed6
0199111b1e3954361d554e37102c4b3b3e381a2b3b21263a281423200401
7956>QJJAAA+HelveticaLT AddT42Char 
1 2232 22 <00020026ffed020602bf0013004300f2bb001c0003003700042bb8001c10
bb00270003000a00042bb8002710b8003710b900000003fc4105007a000a
008a000a00025d410f0009000a0019000a0029000a0039000a0049000a00
59000a0069000a00075d410f0006001c0016001c0026001c0036001c0046
001c0056001c0066001c00075d41050075001c0085001c00025db8002710
b80045dc00b800004558b8002f2f1bb9002f00043e59bb003e0001001700
042bb8003e10bb00220001000f00042bb8002210b8002f10b900050001fc
410f00070005001700050027000500370005004700050057000500670005
00075d4105007600050086000500025d303137141e0233323e0235342e02
23220e02012e0123220e0215173e0333321e02151406070e0323222e0227
2e0135343e0433321e02178d112438271f3324140e213629243624120114
0838393441250d02081b293724204d422d1f240e1f2937251430302e1320
160917263a4f351e453c2b03d81c382c1c182a3b2417342c1d182a38010d
2f3d3c54581c020e1f19101635553f3653270f19120a0a18271d327d4527
55544c3a22122c473600>QJJAAA+HelveticaLT AddT42Char 
1 2662 23 <000100250000020b02b0000e002200b800004558b800072f1bb900070004
3e59bb00010002000d00042bb800011030311321150e0307233e03372125
01e61a53554c136109364e5f33fe7d02b04d1b6e9cc87648a2a1943b>QJJAAA+HelveticaLT AddT42Char 
1 3320 25 <0002002affed020202bf0011003b0110bb000d0003001700042bb8000d10
bb00230003000500042bb80023104105007a0005008a000500025d410f00
09000500190005002900050039000500490005005900050069000500075d
410f0006000d0016000d0026000d0036000d0046000d0056000d0066000d
00075d41050075000d0085000d00025db8000d10b9002f0003fcb8000d10
b80030d0b800302fba003700050023111239b8002310b8003ddc00b80000
4558b8002a2f1bb9002a00043e59bb001c0001000a00042bb8001c10bb00
000001001200042bb8000010b8002a10b8002fdcb8002a10b900330001fc
410f00070033001700330027003300370033004700330057003300670033
00075d4105007600330086003300025d303101323e0235342e0223220615
141e0217222e0235343e0233321e0415140e0423222e0235331e01333236
37270e030114112f2a1d102236263e4a1c2b320931513b201d3954383850
3720120504112039553c3e512f1358043d36485011020a222c31013a0b22
3f341e362a185747333c1f0a4f203a54353057432720364548471c134958
5c4c302839411a363d7e89021420150b>QJJAAA+HelveticaLT AddT42Char 
1 3928 33 <0002000e0000028e02ce0003000b004400b800004558b800072f1bb90007
000c3e59b800004558b800052f1bb9000500043e59b800004558b800092f
1bb9000900043e59bb00030002000400042bb80003103031010323030f01
23013301232701ba6a02731e4b64010e6e01046a470127013cfec456d102
cefd32d1>QJJAAA+HelveticaLT AddT42Char 
1 4756 36 <00020051000002a202ce000800150083b800172fbb00080003000900042b
b8000810b8001710b8000fdcb900040003fc4105007a0004008a00040002
5d410f000900040019000400290004003900040049000400590004006900
0400075d00b800004558b800092f1bb90009000c3e59b800004558b80014
2f1bb9001400043e59b900000002fcb8000910b900070002fc3031373332
363534262b012721321e0215140e022321b2bc5f717463b561012346704e
2a1d477658fee1538f89888853335c804e3c836c4600>QJJAAA+HelveticaLT AddT42Char 
1 4958 37 <000100560000026802ce000b0059bb000a0003000100042bb8000a10b800
05d000b800004558b800022f1bb90002000c3e59b800004558b800002f1b
b9000000043e59bb00070002000800042bb8000710b8000210b900040002
fcb8000010b9000a0002fc30312901112115211521152115210268fdee02
0bfe560189fe7701b102ce56dc56f000>QJJAAA+HelveticaLT AddT42Char 
1 5094 38 <000100560000024702ce0009004bbb00000003000100042bb80005d000b8
00004558b800022f1bb90002000c3e59b800004558b800002f1bb9000000
043e59bb00070002000800042bb8000710b8000210b900040002fc303133
231121152115211521b76101f1fe700160fea002ce56dc56>QJJAAA+HelveticaLT AddT42Char 
1 5642 40 <0001004d0000028602ce000b0081bb00060003000700042bb8000610bb00
010003000000042bb8000110b8000010b80003d0b8000610b80009d000b8
00004558b800002f1bb90000000c3e59b800004558b800082f1bb9000800
0c3e59b800004558b800022f1bb9000200043e59b800004558b800062f1b
b9000600043e59bb000b0002000400042bb8000b10303101331123112111
231133112102256161fe896161017702cefd32014ffeb102cefed700>QJJAAA+HelveticaLT AddT42Char 
1 5820 41 <0001005b000000bc02ce0003002fbb00000003000100042b00b800004558
b800022f1bb90002000c3e59b800004558b800002f1bb9000000043e5930
3133231133bc616102ce>QJJAAA+HelveticaLT AddT42Char 
1 5890 43 <0001004c0000029702ce000b002500b800004558b800062f1bb90006000c
3e59b800004558b800032f1bb90003000c3e593031332311331101330901
230307ad6161015c86fed501337efb7102cefea4015cfedefe5401686c00
>QJJAAA+HelveticaLT AddT42Char 
1 6376 46 <0001004c0000028602ce000b0093bb00060003000700042bb8000610bb00
010003000000042bb8000110b8000610b80004d0b800042fb8000010b800
0ad0b8000a2f00b8000a2fb800004558b800002f1bb90000000c3e59b800
004558b800082f1bb90008000c3e59b800004558b800022f1bb900020004
3e59b800004558b800062f1bb9000600043e59ba000500020000111239ba
000b00020000111239303101331123012311231133013302285e6dfe9302
5e7301670202cefd320244fdbc02cefdbc00>QJJAAA+HelveticaLT AddT42Char 
1 6574 47 <00020027ffed02e302e1001b002f000700b800002f303101140e0423222e
0435343e0433321e0407342e0223220e0215141e0233323e0202e30f2135
4e684343684e35210f0f21354e684343684e35210f6422415d3a3b5c4122
22415c3b3a5d412201672756544c3b22223b4c5456272756544c3b22223b
4c5456273f6b4e2c2c4e6b3f3f6b4e2c2c4e6b00>QJJAAA+HelveticaLT AddT42Char 
1 6714 48 <000200560000026e02ce000e001b001400b800004558b800022f1bb90002
000c3e59303133231121321e0215140e022b013533323e0235342e022b01
b7610143324f371d1732523ae2c1213527151626341ec502ce1f364a2b26
4b3e26530d1e3224222e1c0c>QJJAAA+HelveticaLT AddT42Char 
1 6978 50 <00020058000002ac02ce000c0032001400b800004558b8000f2f1bb9000f
000c3e5930311333323e0235342e022b0111231121321e0215140e02071e
031f01141e021715232e0335342e022b01b9e11b34291a1b272d12f26101
4c2c554229121d24110f1e180f020603080e0b7705070401071b332beb01
87091b30282a301806fd8502ce122b4b392838271b0a06101d2f25820f15
110d06101035362f0a162e251700>QJJAAA+HelveticaLT AddT42Char 
1 7142 51 <00010031ffed026c02e10042000700b8001f2f3031012e0323220e021514
1e021f011e0315140e0223222e02272e013533141e0233323e0235342e02
2f012e0335343e0233321e021701fd0221333e1e173932220f181e10cd23
3c2b193553632e324733210c2e1b5b243946231a4239270f233b2c931234
30231c3c5e415e6e39110201fc2a38220e091b3129171f150c042f081e2f
402b405431140d15180b2a593331402710091a2f271c271c150b22041326
3d2f2a503e2631474f1e>QJJAAA+HelveticaLT AddT42Char 
1 7332 52 <0001000e0000025502ce0007000700b800072f303113211523112311230e
0247f361f302ce56fd880278>QJJAAA+HelveticaLT AddT42Char 
1 7374 53 <0001004fffed028402ce0019001400b800004558b800192f1bb90019000c
3e5930310111140e0223222e0235113311141e0233323e02351102842347
6d4a4869432061203441212144362202cefe2e37634a2b2b485d3201dffe
3c3b4c2e12122c4c3b01c600>QJJAAA+HelveticaLT AddT42Char 
1 7848 65 <00020024fff10212021a0012004a000700b800132f3031010e03070e0315
141633323e0235253e0333321e0415111433323637150e0123222e02270e
0323222e0235343e023f013e03353423220e020701800510203329102722
172d321f3a2d1cfebe0120384f300a252c2c24171d060f080b160f1d2413
08010d212e3b26243c2c1809203f379108100e087b262d190a02010b0408
0709050209121f192b3013212d1ab72f422a13030a13213021fed31f0202
4003070e161d0f0e1e19101628372210333228071201050d171455141f23
0f00>QJJAAA+HelveticaLT AddT42Char 
1 8060 66 <0002003afff1020502ce0013002c001400b800004558b800202f1bb90020
00083e59303101342e0223220e0215141e0233323e0205113311333e0137
321e0215140e0223222e0227231501aa061d393330381d081d2b32152435
2311fe9058021d4c2e3451381d16355843213122150702010719443d2a2d
444d20344428101f364adc02cefefb2a260128475f372f67563811181c0b
4100>QJJAAA+HelveticaLT AddT42Char 
1 8212 67 <0001001efff101dd021a0025000700b800252f3031012e0123220e021514
1e0233323637330e0323222e0235343e0233321e02170188083c38293722
0e0b1f382d2d450b550319314f3937573c201e3d5f4133482f1703015b35
3b2339462322473b25403c1f463c27274660393d6a4f2d2237442200>QJJAAA+HelveticaLT AddT42Char 
1 8330 68 <00020023fff101f302ce0013002e0006b8002e2f303113141e0233323e02
35342e0223220e02012335230e0323222e0235343e0233321e0217331133
7e1123352415322b1d081d383033391d06017553020e2427291343583516
1d3851342433251808025801072b4a361f10284434204d442d2a3d44fee0
481b2114073856672f375f4728131c1f0b010d00>QJJAAA+HelveticaLT AddT42Char 
1 8470 69 <00020028fff10204021a000a002d001400b800004558b8001f2f1bb9001f
000a3e593031012e0323220e0215050e03070e0323222e0235343e023332
1e021521141633323e023701a902102236281e3527170177010b16221909
17212e1f37573c201e3d5f413954381cfe824c4c1f31231301012f1e392b
1a1a2b391e8b0923292a10060d0a07274660393d6a4f2d2b507145525a15
20230f00>QJJAAA+HelveticaLT AddT42Char 
1 8624 70 <0001000e0000010602d80017000700b800042f3031131123112335333534
3633321617152e012322061d013315ae58484847410a130b0814081d1758
01c2fe3e01c2495a3c3701014f01011d20414900>QJJAAA+HelveticaLT AddT42Char 
1 8704 71 <00020028ff2401f3021a002c0040000700b8002d2f303125140e0423222e
0227331e0333323e023d010e0123222e0235343e0233321e021735330114
1e0233323e0235342e0223220e0201f3020e1d36543c17403c2f06580620
262208373c1c06134535435835161d385134243425190853fe9011233524
15322b1d081d383033391d062b13353b3a2d1d0a203e341f220f0325373d
181d202a3856672f375f4728141c200c4dfefc2b4a361f10284434204d44
2d2a3d44>QJJAAA+HelveticaLT AddT42Char 
1 8888 72 <00010041000001eb02ce001c001800b8001c2fb800004558b8000f2f1bb9
000f000c3e593031212311342e0223220e02151123113311333e0333321e
021501eb580917291f1b342a19585802091b2530201e41362201561b2b1e
1111294331fee302cefef70c1e1a110f28473800>QJJAAA+HelveticaLT AddT42Char 
1 8998 73 <000200430000009b02ce00030007001400b800004558b800072f1bb90007
000a3e593031133533151123113343585858026a6464fd96020b>QJJAAA+HelveticaLT AddT42Char 
1 9054 74 <0002fff0ff2e009b02ce00030014001400b800004558b800142f1bb90014
000a3e5930311323353311140e022322273533323e023511339b5858051a
3631121312131a0e0658026a64fce5112e291d034c030d1a16024e00>QJJAAA+HelveticaLT AddT42Char 
1 9142 75 <00010043000001f502ce000b001400b800004558b8000a2f1bb9000a000a
3e59303121230307152311331137330701f571a3495555e170c8010842c6
02cefe60ddc3>QJJAAA+HelveticaLT AddT42Char 
1 9208 76 <000100430000009b02ce0003002fbb00000003000100042b00b800004558
b800022f1bb90002000c3e59b800004558b800002f1bb9000000043e5930
31332311339b585802ce>QJJAAA+HelveticaLT AddT42Char 
1 9278 77 <0001004100000301021a0031000700b800172f3031133315333e0333321e
02173e0333321e0215112311342623220e0215112311342e0223220e0215
1123415302071926352323302012061020242e1e153832235829381c2d20
12580713201813302a1d58020b4a0a1f1c14131a1e0a1220160d0e264537
fe96015236431827331afec1016a10231c120e274435fee3>QJJAAA+HelveticaLT AddT42Char 
1 9422 78 <00010041000001eb021a001a003a00b8001a2fb800004558b8000d2f1bb9
000d000a3e59b800004558b8000c2f1bb9000c00043e59b800004558b800
002f1bb9000000043e593031212311342623220e02151123113315333e03
33321e021501eb58304013302a1d585302071a2734221e41362201424445
0e274435fee3020b4a0a1f1c140f28473800>QJJAAA+HelveticaLT AddT42Char 
1 9560 79 <00020023fff20209021a00130027001c00b8001e2fb800142fb800004558
b800192f1bb90019000a3e59303113141e0233323e0235342e0223220e02
07343e0233321e0215140e0223222e027e0c213c2f2f3c210c0c213c2f2f
3c210c5b1d3c5b3f3f5b3c1d1d3c5b3f3f5b3c1d01061a453e2b2b3e451a
1a453e2b2b3e451a33634e30304e633333634e30304e6300>QJJAAA+HelveticaLT AddT42Char 
1 9704 80 <0002003aff310205021a0018002c001400b800004558b8000d2f1bb9000d
00083e593031133315333e0333321e0215140e022322262723112313141e
0233323e0235342e0223220e023a530208182533243451381d1635584335
45110258541d2b321524352311061d393330381d08020b4a0b1f1c132847
5f372f6756382a1cfefa01bc344428101f364a2b19443d2a2d444d00>QJJAAA+HelveticaLT AddT42Char 
1 10004 82 <0001004d0000014c021a0012001400b800004558b800022f1bb90002000a
3e5930313323113315333e01333216171523220e0215a55853021a473208
0a05211f312313020b572e3801025b1627331c00>QJJAAA+HelveticaLT AddT42Char 
1 10084 83 <00010020fff101d0021a003b001400b800004558b800362f1bb90036000a
3e59303101342e0223220e0215141e021f011e0115140e0223222e042733
1e0333323e023534262f012e0135343e0233321e0215016a081a302a0a23
22190b16241a58524120374c2c3449311e0f05015501091c362f182b2114
3038663742213747274650280a01760c1f1b12050f1e1810150f0c061614
413529402c18121f262927100f2620160a141f161f1e0e190e3b362b3f29
142c39350a00>QJJAAA+HelveticaLT AddT42Char 
1 10270 84 <0001000efff90101029d0019000700b800192f30311311141e023b01150e
0123222e0235112335333533153315ad0b1112071f182307212917094747
585401c2feac0f110801450205111e291801594992924900>QJJAAA+HelveticaLT AddT42Char 
1 10354 85 <00010044fff101e9020b001a001400b800004558b8000c2f1bb9000c000a
3e5930312135270e0123222e0235113311141e0233323e02351133110196
021c4b3f1d3c321f58101b25152a37210e584c022e2f0f263e2f0178fea5
202c1b0c21333d1d0120fdf5>QJJAAA+HelveticaLT AddT42Char 
1 10456 86 <00010008000001ec020b00070006b800012f30310133032303331333018c
60c75ebf668802020bfdf5020bfe5600>QJJAAA+HelveticaLT AddT42Char 
1 10502 87 <0001000e000002c5020b000f0006b8000b2f303121230333133313331333
13330323032301005b97606402656266026a58985b6a02020bfe65019bfe
65019bfdf5019500>QJJAAA+HelveticaLT AddT42Char 
1 10570 88 <0001000b000001ea020b000b0006b8000a2f303121232707231327331737
330701ea70827e6fb8af7179796cb1c5c5010dfeb8b8fe00>QJJAAA+HelveticaLT AddT42Char 
1 10624 89 <0001000bff2a01e9020b0019000ab800012fb800172f303101330e01070e
0323222627351e0133323e0237033313330188612e5b331f2828342a0a10
0b081b121116121410c2648b02020b81ff8150592d0a0503500306071a2f
290219fe5600>QJJAAA+HelveticaLT AddT42Char 
1 0 0 <00000000000000000000>QJJAAA+HelveticaLT AddT42Char 
QJJAAA+HelveticaLT /CharStrings get begin
/space 1 def
/hyphen 13 def
/one 17 def
/two 18 def
/three 19 def
/four 20 def
/five 21 def
/six 22 def
/seven 23 def
/nine 25 def
/A 33 def
/D 36 def
/E 37 def
/F 38 def
/H 40 def
/I 41 def
/K 43 def
/N 46 def
/O 47 def
/P 48 def
/R 50 def
/S 51 def
/T 52 def
/U 53 def
/a 65 def
/b 66 def
/c 67 def
/d 68 def
/e 69 def
/f 70 def
/g 71 def
/h 72 def
/i 73 def
/j 74 def
/k 75 def
/l 76 def
/m 77 def
/n 78 def
/o 79 def
/p 80 def
/r 82 def
/s 83 def
/t 84 def
/u 85 def
/v 86 def
/w 87 def
/x 88 def
/y 89 def
end
QJJAAA+HelveticaLT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 57 /nine put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/BEHKNW+HelveticaLT /QJJAAA+HelveticaLT findfont ct_VMDictPut
/BEHKNW+HelveticaLT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 3{/.notdef}rp /one /two /three 
/four /five /six /seven /.notdef /nine 7{/.notdef}rp /A 
2{/.notdef}rp /D /E /F /.notdef /H /I /.notdef 
/K 2{/.notdef}rp /N /O /P /.notdef /R /S 
/T /U 11{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y 134{/.notdef}rp]
BEHKNW+HelveticaLT nf
BEHKNW+HelveticaLT*1 [9.96 0 0 -9.96 0 0 ]msf
-333.327 -198.742 mo
(Objectives 15-1)
[7.76282 5.5517 2.22507 5.5517 4.99396 2.78281 2.22507 5.04077 5.5517 4.99393 207.181 5.5517 
5.5517 3.33057 0 ]xsh
-333.327 -186.74 mo
(Theory and Examples 15-2)
[6.11536 5.51984 5.56763 5.56766 3.29965 5.00989 2.81967 5.51984 5.57959 5.51984 2.81967 6.67328 
5.00986 5.56766 8.32648 5.51984 2.22009 5.56763 5.00989 156.6 5.56766 5.51981 3.3465 0 
]xsh
-297.322 -174.738 mo
(Simple Associative Network )
[6.66132 2.22903 8.31454 5.55569 2.22903 5.55569 2.75992 6.66132 5.03976 4.99792 5.55569 4.99792 
2.22906 5.55569 2.7868 2.22903 4.99792 5.55569 2.75989 7.20905 5.55569 2.7868 7.20905 5.55569 
3.33453 4.99792 0 ]xsh
-79.4968 -174.738 mo
(15-3)
[5.55569 5.55566 3.33453 0 ]xsh
-297.322 -162.737 mo
(Unsupervised Hebb Rule )
[7.20905 5.55569 4.99792 5.55569 5.55569 5.55566 3.33453 5.04077 2.22905 4.99794 5.55569 5.55566 
2.82068 7.20905 5.55569 5.55566 5.55569 2.76089 7.20905 5.55569 2.22903 5.55569 0 ]xsh
-79.4271 -162.737 mo
(15-5)
[5.55569 5.55566 3.33453 0 ]xsh
-261.317 -150.735 mo
(Hebb Rule with Decay )
[7.20508 5.5517 5.5517 5.55173 2.75989 7.25986 5.51984 2.22507 5.5517 2.75992 7.20505 2.22507 
2.78284 5.5517 2.81967 7.20508 5.5517 4.99393 5.5517 5.03976 0 ]xsh
-79.5366 -150.735 mo
(15-7)
[5.5517 5.5517 3.33057 0 ]xsh
-297.322 -138.733 mo
(Simple Recognition Network )
[6.65933 2.22705 8.31256 5.55368 2.22705 5.55371 2.75992 7.25983 5.51985 4.99593 5.55371 5.55368 
5.55371 2.22705 2.78479 2.22708 5.55368 5.55371 2.75989 7.20706 5.55371 2.78482 7.25983 5.55371 
3.33255 4.99594 0 ]xsh
-79.5167 -138.733 mo
(15-9)
[5.55368 5.55371 3.33255 0 ]xsh
-297.322 -126.731 mo
(Instar Rule )
[2.78183 5.55072 4.99295 2.7818 5.55072 3.32956 2.75992 7.20407 5.55069 2.22408 5.5507 0 
]xsh
-79.5466 -126.731 mo
(15-11)
[5.55072 5.55069 3.32956 5.55069 0 ]xsh
-261.327 -114.729 mo
(Kohonen Rule )
[6.67926 5.57362 5.51982 5.57361 5.57361 5.51984 5.57361 2.75992 7.22699 5.57361 2.24698 5.57361 
0 ]xsh
-79.4868 -114.729 mo
(15-15)
[5.57361 5.51984 3.35245 5.51984 0 ]xsh
-297.322 -102.728 mo
(Simple Recall Network )
[6.65735 2.22507 8.31055 5.5517 2.22507 5.5517 2.75992 7.25986 5.51984 4.99393 5.5517 2.22507 
2.22507 2.75992 7.25986 5.51984 2.78281 7.20508 5.5517 3.33054 4.99396 0 ]xsh
-79.5565 -102.728 mo
(15-16)
[5.5517 5.5517 3.33057 5.5517 0 ]xsh
-297.322 -90.726 mo
(Outstar Rule )
[7.74191 5.57959 2.7619 5.03976 2.7619 5.57959 3.30963 2.75992 7.25984 5.51984 2.20415 5.57959 
0 ]xsh
-79.5266 -90.726 mo
(15-17)
[5.57959 5.51984 3.36041 5.51984 0 ]xsh
-333.327 -78.7242 mo
(Summary of Results )
[6.65335 5.5477 8.30658 8.30658 5.5477 3.32657 5.03976 2.75992 5.5477 2.81967 2.75992 7.20108 
5.54773 4.98996 5.54773 2.22108 2.77884 4.98997 0 ]xsh
-79.5764 -78.7242 mo
(15-21)
[5.54773 5.5477 3.32657 5.54773 0 ]xsh
-333.327 -66.7224 mo
(Solved Problems )
[6.65833 5.5527 2.22604 4.99496 5.55267 5.5527 2.75992 6.72009 3.29968 5.5527 5.55267 2.22607 
5.5527 8.31155 4.99493 0 ]xsh
-79.5565 -66.7224 mo
(15-23)
[5.5527 5.5527 3.33154 5.55267 0 ]xsh
-333.327 -54.7206 mo
(Epilogue 15-34)
[6.67627 5.57062 2.24399 2.24399 5.51984 5.57062 5.51984 5.57062 214.92 5.57059 5.51984 3.34949 
5.51981 0 ]xsh
-333.327 -42.7188 mo
(Further Reading )
[6.12332 5.51984 3.35446 2.75992 5.57559 5.51984 3.35443 2.75992 7.22897 5.57562 5.57559 5.51984 
2.24896 5.57562 5.51981 0 ]xsh
-79.4968 -42.7188 mo
(15-35)
[5.57559 5.51984 3.35446 5.51984 0 ]xsh
-333.327 -30.717 mo
(Exercises 15-37)
[6.65436 4.99097 5.54871 3.32755 5.03976 2.22208 4.99097 5.54871 4.99097 210.48 5.54871 5.54877 
3.32751 5.54877 0 ]xsh
.895628 .7673 0 0 cmyk
%ADOBeginSubsetFont: HIBBAA+TimesLTStd-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BEHKNV+TimesLTStd-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B6079FED7B811C9CB98FDD2CBB73B75B81400446779C1C292B
57E4F38E889FF7DAA4021ADF960236F2D2B95CAC0CC87161AEA0313D48BD8794
18C174C71B8EE95607DE828C588519C28FFAE0B29ADE5BA9D57C730B2BE3622D
0ED04F93D31D0DA7C5A6426D1B391B0478DD4AA816508B2B91F2EBF58CF433D5
DE4811CC5EAA57D8EE9ECECAA3B67F1CB7720172667B29> |-
/N <1C60D8A8C9B6079F1E72629B90E3BF572C953D8759DE3E6006A10F5E5706
8F9A03033AC5EA12BE216216DBB5AE366546D563309C4FED29C4D77CE6955423
F62A19E925AAA030C45D43610BC0195EA52D665B51476DF5A0C2DB4E0E9B8B74
FA1C6ECCFEB437204FDDB974B090A6D93625A7E1649C5CEFD4F179D24392834F
3E70F952D3DC65983D8B7549> |-
/k <1C60D8A8C9B7EF3257330F56CA17E601966AD3F64003850414F3965720F1
365E8763A3EF76CEC54BD419F20A42A1596F79DB7D5911E9D3F19D5358AD664F
B2E9B02EF29D8F6DE22809CCAE676EED8889CE515032E3925659B5C033F2765E
CB4DABB286D350DE85CE2E97FE6374C57F12D19FB73BB35AE29158EDC20D9538
E7B49A3B314BABFA8B122D181C40A9E80970> |-
/m <1C60D8A8C9B6B41C9EF86D4D6709D4B4B598121ABB5312D265CF235A8DF8
71F947DD83CAEC145FFBDAC2ACD58A94C733AE766077D3CED781B2D343AD55DF
DDB8D67A9086862F8EFE2574B6FFA6EC83AC9C357A9D9807A1FF78CD8BA52757
00FCF3D844938953EC2A50B770F36645E5AA8DCB80EFD2F2006585B2B8C533C2
8E0BEBAD08309F295A06E90F2028AA4FD3445A8F950F8DBF4741CC99024C4E65
71BC4D2D7EABC29C569C3F3026BD485268134B6B652756116C0C33210E033B3C
FE7A43ABCA048A4EB46257DA833BC574EA942EFC1A2B38284B3EF3E16B1D1744
19935953EC4A9FB849488346E0B030999551E986> |-
/p <1C60D8A8C9B7EF3227BDC1102CFD43DAE6FF3727F14974B147AEAF961A46
548CF67DCAB1E7E0C858DB8E083DDAE1E7876A7E63198EB9F03C4C808041214A
C7DAB3F5B782E8F84D2DB6557B754120B8475DECD2C35887A358A8FE7F75F351
1071F0E7B59316C20863AF76AF28EB1142C83B21BA956BA2768EDF3F1296DCCE
A6DE9A26F3A5D7B5E9C8B66B003A04645267835E6601E794C6> |-
/w <1C60D8A8C9B6079F073CF9E6AD49A7E1970CF730B6518E4A00D66ABF4428
1804717AFF634F54CF60EB32CC16A040914185328DE095420F80B10F7D9B0D8C
7928B593506757A27F9F9025F90FD57A1D455B96824A033A228DF9D2BF5EDE87
050AF05D430F4ABB063E60C46BAA5C202C0A0935A9E8C914DC2C549E08B4737C
68F2DE3ACFA6F0E9F808BE86DAD5AB99EC9D0C0C4D976DC3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BEHKNV+TimesLTStd-Bold /Encoding get
dup 67 /C put
dup 78 /N put
dup 107 /k put
dup 109 /m put
dup 112 /p put
dup 119 /w put
pop
%ADOEndSubsetFont
/BEHKNV+TimesLTStd-Bold*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 
/.notdef /N 18{/.notdef}rp /a /.notdef /c /.notdef /e 
/.notdef /g /.notdef /i /.notdef /k /.notdef /m 
/n /o /p /.notdef /r /s /t /.notdef 
/v /w 136{/.notdef}rp]
BEHKNV+TimesLTStd-Bold nf
BEHKNV+TimesLTStd-Bold*1 [15.96 0 0 -15.96 0 0 ]msf
-274.947 23.2581 mo
(Competitive Networks)
[11.5423 7.99916 13.3137 8.89291 7.10541 5.33371 4.45602 5.33371 4.45602 7.99918 7.10538 3.95969 
11.5423 7.10541 5.33371 11.5423 7.99915 7.10538 8.89291 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+HelveticaLT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+HelveticaLT gcheck setglobal} if
1 20 8 <00010044ff31012b02dd00150061bb00050003001000042bb8000510410f
000600050016000500260005003600050046000500560005006600050007
5d4105007500050085000500025d00b800004558b800002f1bb90000000c
3e59b800004558b8000a2f1bb9000a00063e593031010e0315141e021723
2e0335343e0237012a203223131425321e3b27402d18162c3e2902dd3c67
6f845a3e6e6a6b3b3a6d6f7846427973703a>QJJAAA+HelveticaLT AddT42Char 
1 188 9 <00010022ff31010902dd00150065bb00100003000500042bb80010104105
007a0005008a000500025d410f0009000500190005002900050039000500
490005005900050069000500075db80017dc00b800004558b8000a2f1bb9
000a000c3e59b800004558b800002f1bb9000000063e593031173e033534
2e0227331e0315140e020723203223131425321e3b273f2d19162c3f28cf
3c666f855a3e6e6a6b3b3b6c6f7846427973703a>QJJAAA+HelveticaLT AddT42Char 
1 642 16 <00020025ffed020702bf0013001f00e2b800202fb800212fb80000dcb800
2010b8000ad0b8000a2fb8000010b900140003fc4105007a0014008a0014
00025d410f00090014001900140029001400390014004900140059001400
69001400075db8000a10b9001a0003fc410f0006001a0016001a0026001a
0036001a0046001a0056001a0066001a00075d41050075001a0085001a00
025d00b800004558b800052f1bb9000500043e59bb000f0001001700042b
b8000f10b8000510b9001d0001fc410f0007001d0017001d0027001d0037
001d0047001d0057001d0067001d00075d41050076001d0086001d00025d
303101140e0223222e0235343e0233321e02073426232206151416333236
020713345e4c4c5e351212355e4c4c5e34135e474c4c47474c4c47015637
7e6c48486c7e37377e6c48486c7e3784969684849696>QJJAAA+HelveticaLT AddT42Char 
1 2750 24 <00030026ffed020502bf00110025004e0162bb00170003003f00042bb800
1710bb00260003000300042bb80026104105007a0003008a000300025d41
0f0009000300190003002900030039000300490003005900030069000300
075d410f0006001700160017002600170036001700460017005600170066
001700075d4105007500170085001700025dba0045003f0017111239b800
452fb9000d0003fcba002100030026111239b800212f4105007a0021008a
002100025d410f0009002100190021002900210039002100490021005900
210069002100075dba002b00030026111239b900300003fcba0042003f00
30111239b80050dc00b800004558b800352f1bb9003500043e59bb004a00
01000800042bb8004a10bb00000001001200042bb8000010b8003510b900
1c0001fc410f0007001c0017001c0027001c0037001c0047001c0057001c
0067001c00075d41050076001c0086001c00025dba002b00120000111239
ba004200120000111239303101323635342e0223220e0215141e0217220e
0215141e0233323e0235342e0237140e02071e0315140e0223222e02272e
03353436372e0135343e0233321e02011439440c1e3227232e1a0a14232c
19253724110d213a2e1832291a172835b9131c1f0c242c1a091c3a5a3e0f
282e2f151b1d0e023f382d321331523f3a5334180196413010251f151621
261119281c0f4c16252f1815312a1c0b1d342924332210c026332213060f
2a2f2f142a503e26040c151115302e270d4153171146321b443a28223440
>QJJAAA+HelveticaLT AddT42Char 
1 4052 34 <0003004a0000027302ce000a0021002a00f3bb002a0003000b00042bb800
2a10bb00110003002600042bb8001110b8002a10b80000d04105007a0026
008a002600025d410f000900260019002600290026003900260049002600
5900260069002600075dba000400260011111239b800042f4105007a0004
008a000400025d410f000900040019000400290004003900040049000400
5900040069000400075dba001600260011111239b9001b0003fcb8002cdc
00b800004558b8000b2f1bb9000b000c3e59b800004558b800202f1bb900
2000043e59bb00230001000900042bb8002310b8002010b900000002fcba
001600090023111239b8000b10b900290002fc30313733323635342e022b
010321321e0215140e02071e0315140e022321133332363534262b01abcf
4c4c1e303c1ebf61013c324c331a0815251e122d281b203d5b3cfecb61af
46504451b053473c262f1b09017f1d324125122928250e0716273d2e2b4d
3a22019e32423336>QJJAAA+HelveticaLT AddT42Char 
1 4420 35 <0001002cffed02a902e1002b00d5bb000a0003002100042bb8000a10410f
0006000a0016000a0026000a0036000a0046000a0056000a0066000a0007
5d41050075000a0085000a00025d00b800142fb800004558b800262f1bb9
0026000c3e59b800004558b8001c2f1bb9001c00043e59b8002610b90005
0002fc4105007900050089000500025d410f000800050018000500280005
0038000500480005005800050068000500075db8001c10b9000f0002fc41
0f0007000f0017000f0027000f0037000f0047000f0057000f0067000f00
075d41050076000f0086000f00025d3031012e0323220e0215141e023332
3e0237330e0523222e0235343e0233321e021702440a2e393e1a31554025
18385b43183c3b320c5e0a2f3d443f340d3d745b372e567d4e456a492a05
01f62f3b200b24476b473f6e502e0f2a4d3f445e3f2412042a5b91685389
63372841552d>QJJAAA+HelveticaLT AddT42Char 
1 5980 44 <0001004c0000021902ce00050035bb00000003000300042b00b800004558
b800042f1bb90004000c3e59b800004558b800022f1bb9000200043e59b9
00000002fc3031372115211133ad016cfe3361565602ce00>QJJAAA+HelveticaLT AddT42Char 
1 6064 45 <00010049000002f902ce001b00e0bb00130003001400042bb8001310bb00
1b0003000000042bb8001b10b8000010b80004d0b800042fb8000010b800
07d0b800072fba00080014001b111239b8001310b8000bd0ba000c001400
13111239b8001310b8000fd0b8000f2fba00180014001b11123900b80017
2fb800004558b800152f1bb90015000c3e59b800004558b800192f1bb900
19000c3e59b800004558b800002f1bb9000000043e59b800004558b80009
2f1bb9000900043e59b800004558b800132f1bb9001300043e59ba000800
000015111239ba000c00000015111239ba00180000001511123930312111
3436353436352303230323141615141615112311331333133311029b0101
02ca60ca0201015e8bcd02cc8a01a80827191a3819fda5025a1938191927
08fe5802cefda1025ffd3200>QJJAAA+HelveticaLT AddT42Char 
1 6816 49 <00020027ffc802e302e1001f0036000700b800192f303105270e0123222e
0435343e0433321e0415140e02071725173e0135342e0223220e0215141e
023332372702ac6e235d3943684e35210f0f21354e684343684e35210f0b
19281c62fef85b262922415d3a3b5c412222415c3b3c2e4b38551719223b
4c5456272756544c3b22223b4c545627224b4a451d4cce472673453f6b4e
2c2c4e6b3f3f6b4e2c173a00>QJJAAA+HelveticaLT AddT42Char 
1 7476 54 <000100140000028702ce0007004400b800062fb800004558b800002f1bb9
0000000c3e59b800004558b800042f1bb90004000c3e59b800004558b800
022f1bb9000200043e59ba00070002000011123930310133012301331333
021a6dfefa67fefa6ccd0202cefd3202cefd9c00>QJJAAA+HelveticaLT AddT42Char 
1 10720 90 <0001001f000001d5020b0009000ab800082fb800072f3031372115213501
21352115940141fe4a013bfedd0195494945017d4948>QJJAAA+HelveticaLT AddT42Char 
QJJAAA+HelveticaLT /CharStrings get begin
/parenleft 8 def
/parenright 9 def
/zero 16 def
/eight 24 def
/B 34 def
/C 35 def
/L 44 def
/M 45 def
/Q 49 def
/V 54 def
/z 90 def
end
QJJAAA+HelveticaLT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 56 /eight put
dup 66 /B put
dup 67 /C put
dup 76 /L put
dup 77 /M put
dup 81 /Q put
dup 86 /V put
dup 122 /z put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BEHKNW+HelveticaLT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp 
/zero /one /two /three /four /five /six /seven 
/eight /nine 7{/.notdef}rp /A /B /C /D /E 
/F /.notdef /H /I /.notdef /K /L /M 
/N /O /P /Q /R /S /T /U 
/V 10{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /j /k /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /x /y /z 133{/.notdef}rp]
BEHKNW+HelveticaLT nf
BEHKNW+HelveticaLT*1 [9.96 0 0 -9.96 0 0 ]msf
-333.327 48.2781 mo
(Objectives 16-1)
[7.76083 5.54971 2.22305 5.54971 4.99194 2.78085 2.22305 5.03879 5.54968 4.99197 207.179 5.54971 
5.54971 3.32855 0 ]xsh
-333.327 60.2799 mo
(Theory and Examples 16-2)
[6.11536 5.51984 5.56763 5.56766 3.29965 5.00989 2.81967 5.51984 5.57959 5.51984 2.81967 6.67328 
5.00986 5.56766 8.32648 5.51984 2.22009 5.56763 5.00989 156.6 5.56766 5.51981 3.3465 0 
]xsh
-297.322 72.2817 mo
(Hamming Network )
[7.22995 5.5766 8.33545 8.27969 2.24997 5.5766 5.5766 2.75992 7.22995 5.5766 2.75995 7.20007 
5.5766 3.29968 5.01883 0 ]xsh
-79.4769 72.2817 mo
(16-3)
[5.5766 5.51984 3.35544 0 ]xsh
-261.327 84.2835 mo
(Layer 1 )
[5.5766 5.51984 5.01883 5.5766 3.35547 2.75992 5.51984 0 ]xsh
-79.4968 84.2835 mo
(16-3)
[5.5766 5.51984 3.35544 0 ]xsh
-261.327 96.2853 mo
(Layer 2 )
[5.5766 5.51984 5.01883 5.5766 3.35547 2.75992 5.51984 0 ]xsh
-79.4968 96.2853 mo
(16-4)
[5.5766 5.51984 3.35544 0 ]xsh
-297.322 108.287 mo
(Competitive Layer )
[7.20209 5.54871 8.30756 5.54874 5.54871 2.77985 2.22208 2.77982 2.22209 5.03975 5.54874 2.81967 
5.54871 5.54871 4.99097 5.54871 3.32758 0 ]xsh
-79.5067 108.287 mo
(16-5)
[5.54871 5.54874 3.32755 0 ]xsh
-261.317 120.289 mo
(Competitive Learning )
[7.18315 5.57959 8.34044 5.51984 5.57956 2.76093 2.20316 2.76089 2.20316 5.03976 5.52979 2.81967 
5.52982 5.57959 5.52979 3.35944 5.57959 2.22009 5.52979 5.57959 0 ]xsh
-79.5267 120.289 mo
(16-7)
[5.57959 5.51984 3.36041 0 ]xsh
-261.317 132.291 mo
(Problems with Competitive Layers 16-9)
[6.6713 3.29968 5.56564 5.56564 2.23901 5.51984 8.33942 5.0079 2.81967 7.21899 2.23901 2.75992 
5.56564 2.75992 7.21902 5.56564 8.32449 5.51984 5.56564 2.75992 2.23898 2.79678 2.23901 5.00787 
5.56564 2.75992 5.56564 5.51984 5.0079 5.56561 3.34451 5.0079 30.7196 5.56564 5.51981 3.34451 
0 ]xsh
-297.322 144.293 mo
(Competitive Layers in Biology )
[7.20309 5.54968 8.30856 5.54971 5.54971 2.78082 2.22308 2.78082 2.22308 5.03976 5.54971 2.81967 
5.54971 5.54971 4.99194 5.54971 3.32855 4.99197 2.81967 2.22308 5.54968 2.8197 6.65533 2.22305 
5.54971 2.22308 5.54968 5.54971 4.99197 0 ]xsh
-79.4669 144.293 mo
(16-10)
[5.54971 5.54971 3.32855 5.54971 0 ]xsh
-297.322 156.294 mo
(Self-Organizing Feature Maps )
[6.67825 5.5726 2.246 2.75992 3.29965 7.79968 3.29968 5.5726 5.57263 5.51984 2.24597 5.01486 
2.24597 5.51984 5.57263 2.75989 6.12036 5.57263 5.51981 2.75992 5.57263 3.35144 5.51984 2.75992 
8.33148 5.5726 5.51984 5.03976 0 ]xsh
-79.5267 156.294 mo
(16-12)
[5.57263 5.51981 3.35147 5.51984 0 ]xsh
-261.327 168.296 mo
(Improving Feature Maps )
[2.75894 8.33842 5.57262 3.29868 5.57263 5.01486 2.24597 5.57263 5.51883 2.81866 6.05859 5.57263 
5.5726 2.75894 5.5188 3.35846 5.5726 2.75891 8.33148 5.51883 5.57263 5.01483 0 ]xsh
-79.5068 168.296 mo
(16-15)
[5.57263 5.51883 3.35147 5.51883 0 ]xsh
-297.322 180.298 mo
(Learning Vector Quantization )
[5.57263 5.51984 5.5726 3.29968 5.5726 2.246 5.51981 5.57959 2.75993 6.67825 5.57262 5.01486 
2.80374 5.51984 3.36041 2.75992 7.78375 5.51984 5.5726 5.57263 2.75992 2.24597 5.01486 5.57263 
2.75989 2.24597 5.57263 5.51984 0 ]xsh
-79.447 180.298 mo
(16-16)
[5.57263 5.51981 3.35147 5.51984 0 ]xsh
-261.317 192.3 mo
(LVQ Learning )
[5.57759 6.68324 7.7399 2.8197 5.51981 5.57761 5.51984 3.35645 5.57761 2.16031 5.57761 5.57761 
0 ]xsh
-79.5067 192.3 mo
(16-18)
[5.57761 5.51984 3.35645 5.51981 0 ]xsh
-261.317 204.302 mo
(Improving LVQ Networks \(LVQ2\) 16-21)
[2.75992 8.33943 5.56764 3.29968 5.56763 5.00989 2.241 5.56763 5.51984 2.81967 5.51984 6.66031 
7.77878 2.75989 7.22101 5.56766 2.75992 7.25983 5.51984 3.35944 5.00989 5.00989 2.81967 3.29965 
5.57959 6.67328 7.73993 5.56763 3.3465 35.6996 5.56766 5.51981 3.34647 5.51984 0 ]xsh
-333.317 216.303 mo
(Summary of Results )
[6.65335 5.54773 8.30658 8.30655 5.54773 3.32657 5.03973 2.75992 5.54773 2.81967 2.75992 7.20108 
5.54773 4.98996 5.54771 2.22108 2.77884 4.98996 0 ]xsh
-79.5665 216.303 mo
(16-22)
[5.54773 5.5477 3.32657 5.54773 0 ]xsh
-333.317 228.305 mo
(Solved Problems )
[6.65833 5.5527 2.22604 4.99496 5.55267 5.5527 2.75992 6.72009 3.29968 5.5527 5.55267 2.22607 
5.5527 8.31155 4.99493 0 ]xsh
-79.5466 228.305 mo
(16-24)
[5.5527 5.5527 3.33154 5.5527 0 ]xsh
-333.317 240.307 mo
(Epilogue 16-37)
[6.67627 5.57062 2.24399 2.24399 5.51984 5.57062 5.51984 5.57062 214.92 5.57062 5.51984 3.34949 
5.51981 0 ]xsh
-333.317 252.309 mo
(Further Reading )
[6.12332 5.51984 3.35446 2.75992 5.57559 5.51984 3.35443 2.75992 7.22897 5.57562 5.57559 5.51984 
2.24896 5.57562 5.51981 0 ]xsh
-79.4868 252.309 mo
(16-38)
[5.57559 5.51984 3.35446 5.51984 0 ]xsh
-333.317 264.311 mo
(Exercises 16-39)
[6.65436 4.99097 5.54871 3.32755 5.03976 2.22208 4.99097 5.54871 4.99097 210.48 5.54874 5.54871 
3.32758 5.54871 0 ]xsh
gsave
-434.367 -234.382 mo
-396.327 -234.382 li
-396.327 -196.402 li
-434.367 -196.402 li
cp
eclp
-433.347 -197.422 mo
-397.347 -197.422 li
-397.347 -233.422 li
-433.347 -233.422 li
cp
.895628 .7673 0 0 cmyk
f
-433.347 -233.182 mo
-397.107 -233.182 li
-397.107 -233.662 li
-433.347 -233.662 li
cp
f
-397.587 -197.182 mo
-397.107 -197.182 li
-397.107 -233.422 li
-397.587 -233.422 li
cp
f
-433.587 -197.182 mo
-397.347 -197.182 li
-397.347 -197.662 li
-433.587 -197.662 li
cp
f
-433.587 -197.422 mo
-433.107 -197.422 li
-433.107 -233.662 li
-433.587 -233.662 li
cp
f
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: HIBBAA+TimesLTStd-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BEHKNV+TimesLTStd-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DC57077693EC684E6DBE19F5F702F32764E78CA8D64
20EA82D965465C90D04F776C2A668D2039B1FCEC551B2B28D74F8428846D2F39
6ACEA904BC9B5AD6761A> |-
/five <1C60D8A8C9B7A73DCD8E7B306BC658F8DBFE25AA938E8AD1AA7F3E464
E56DD0AB531194F3E8261B232531D4832776EF95DB45D30C1F39C73D566693DC
9D9DCE67EEDD51AF2E77740D867D349E93F1FCBDB2E475A2ABB42F1B2E4CAD6C
B12249AA23B66DF859C0576ABB883C917BAF62DB653D843A955607CBF0F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BEHKNV+TimesLTStd-Bold /Encoding get
dup 49 /one put
dup 53 /five put
pop
%ADOEndSubsetFont
/BEHKNV+TimesLTStd-Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 3{/.notdef}rp /five 11{/.notdef}rp /A 
/.notdef /C 8{/.notdef}rp /L /.notdef /N 18{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /.notdef /i 
/.notdef /k /.notdef /m /n /o /p /.notdef 
/r /s /t /.notdef /v /w 136{/.notdef}rp]
BEHKNV+TimesLTStd-Bold nf
BEHKNV+TimesLTStd-Bold*1 [24 0 0 -24 0 0 ]msf
-428.067 -208.402 mo
(15)
[12 0 ]xsh
grestore
.632599 -197.422 mo
36.6326 -197.422 li
36.6326 -233.422 li
.632599 -233.422 li
cp
.895628 .7673 0 0 cmyk
f
.632599 -232.882 mo
37.1726 -232.882 li
37.1726 -233.902 li
.632599 -233.902 li
cp
f
36.1526 -196.882 mo
37.1726 -196.882 li
37.1726 -233.422 li
36.1526 -233.422 li
cp
f
.152618 -196.882 mo
36.6326 -196.882 li
36.6326 -197.902 li
.152618 -197.902 li
cp
f
.152618 -197.422 mo
1.17261 -197.422 li
1.17261 -233.902 li
.152618 -233.902 li
cp
f
gsave
4.2926 -229.822 mo
33.0926 -229.822 li
33.0926 -201.022 li
4.2926 -201.022 li
cp
eclp
4.2926 -201.022 mo
33.0926 -201.022 li
33.0926 -229.822 li
4.2926 -229.822 li
cp
1 /0 /CSD get_res sepcs
.504 sep
f
4.2926 -229.282 mo
33.0926 -229.282 li
33.0926 -229.852 li
4.2926 -229.852 li
cp
f
32.6126 -200.992 mo
33.0926 -200.992 li
33.0926 -229.822 li
32.6126 -229.822 li
cp
f
4.2326 -200.992 mo
33.0926 -200.992 li
33.0926 -201.502 li
4.2326 -201.502 li
cp
f
4.2326 -201.022 mo
4.83261 -201.022 li
4.83261 -229.852 li
4.2326 -229.852 li
cp
f
grestore
7.83258 -204.622 mo
29.4326 -204.622 li
29.4326 -226.222 li
7.83258 -226.222 li
cp
f
7.83258 -225.682 mo
29.9726 -225.682 li
29.9726 -226.702 li
7.83258 -226.702 li
cp
f
28.9526 -204.082 mo
29.9727 -204.082 li
29.9727 -226.222 li
28.9526 -226.222 li
cp
f
7.3526 -204.082 mo
29.4326 -204.082 li
29.4326 -205.102 li
7.3526 -205.102 li
cp
f
7.3526 -204.622 mo
8.37262 -204.622 li
8.37262 -226.702 li
7.3526 -226.702 li
cp
f
23.3126 -210.622 mo
28.7126 -210.622 li
28.7126 -212.782 li
23.3126 -212.782 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
23.3126 -212.542 mo
28.9526 -212.542 li
28.9526 -213.022 li
23.3126 -213.022 li
cp
f
28.4726 -210.382 mo
28.9526 -210.382 li
28.9526 -212.782 li
28.4726 -212.782 li
cp
f
23.0726 -210.382 mo
28.7126 -210.382 li
28.7126 -210.862 li
23.0726 -210.862 li
cp
f
23.0726 -210.622 mo
23.5526 -210.622 li
23.5526 -213.022 li
23.0726 -213.022 li
cp
f
24.3926 -211.702 mo
24.3325 -212.302 li
24.1525 -212.962 li
22.8486 -215.835 18.7065 -215.433 17.9725 -212.302 cv
17.9125 -211.702 li
17.9725 -211.042 li
18.7556 -207.755 23.1016 -207.662 24.1525 -210.442 cv
24.3325 -211.042 li
24.3926 -211.702 li
ef
24.1526 -211.642 mo
24.0925 -212.242 li
23.9125 -212.902 li
23.9725 -212.842 li
23.6725 -213.382 li
23.6725 -213.322 li
23.3126 -213.802 li
23.3726 -213.802 li
22.8926 -214.162 li
22.8926 -214.102 li
22.2925 -214.402 li
22.3525 -214.402 li
21.7526 -214.582 li
21.8126 -214.582 li
21.1526 -214.702 li
21.2126 -214.702 li
20.6125 -214.582 li
19.9526 -214.402 li
20.0126 -214.402 li
19.4725 -214.102 li
19.5325 -214.162 li
19.0526 -213.802 li
18.6926 -213.322 li
18.7526 -213.382 li
18.4526 -212.842 li
18.2126 -212.182 li
18.2126 -212.242 li
18.1526 -211.642 li
18.1526 -211.702 li
18.2126 -211.042 li
18.2126 -211.102 li
18.4526 -210.502 li
18.4526 -210.562 li
18.7526 -209.962 li
18.6926 -209.962 li
19.0526 -209.482 li
19.0526 -209.542 li
19.5325 -209.182 li
19.4725 -209.182 li
20.0126 -208.882 li
19.9526 -208.942 li
20.6125 -208.762 li
21.2126 -208.702 li
21.1526 -208.702 li
21.8126 -208.762 li
21.7526 -208.762 li
22.3525 -208.942 li
22.2925 -208.882 li
22.8926 -209.182 li
23.3726 -209.542 li
23.3126 -209.482 li
23.6725 -209.962 li
23.9725 -210.562 li
23.9125 -210.502 li
24.0925 -211.102 li
24.0925 -211.042 li
24.1526 -211.702 li
24.6326 -211.642 li
24.5726 -210.982 li
24.3926 -210.382 li
24.3926 -210.322 li
24.0925 -209.722 li
24.0325 -209.662 li
23.6725 -209.182 li
23.1926 -208.822 li
23.1326 -208.762 li
22.5325 -208.462 li
22.4725 -208.462 li
21.6545 -208.115 20.6575 -208.169 19.8326 -208.462 cv
19.7726 -208.462 li
19.2325 -208.762 li
19.2325 -208.822 li
18.7526 -209.182 li
18.6926 -209.182 li
17.6036 -210.683 17.2266 -212.007 18.3326 -213.622 cv
18.6926 -214.102 li
18.7526 -214.162 li
19.2325 -214.522 li
19.7726 -214.822 li
19.8326 -214.882 li
20.4926 -215.062 li
21.0925 -215.182 li
21.2126 -215.182 li
21.8726 -215.062 li
22.4456 -214.929 23.2286 -214.548 23.6725 -214.162 cv
23.6725 -214.102 li
24.0325 -213.622 li
24.0925 -213.622 li
24.3926 -213.082 li
24.3926 -213.022 li
24.5726 -212.362 li
24.5726 -212.302 li
24.6326 -211.702 li
f
24.1526 -211.702 mo
24.1526 -211.642 li
24.6326 -211.702 li
24.6326 -211.642 li
f
17.9126 -216.502 mo
17.9726 -217.342 li
18.2466 -218.671 19.0826 -220.406 20.5526 -220.702 cv
21.1526 -220.822 li
21.1526 -216.502 li
17.9126 -216.502 li
ef
17.6726 -216.502 mo
17.6726 -216.262 li
18.1526 -216.202 li
18.1526 -216.442 li
f
17.6726 -216.502 mo
17.7326 -217.342 li
17.7326 -217.402 li
17.9726 -218.242 li
18.0326 -218.242 li
18.3326 -218.962 li
18.3326 -219.022 li
18.6926 -219.622 li
19.1726 -220.162 li
19.2326 -220.222 li
19.7726 -220.642 li
19.8326 -220.702 li
20.0126 -220.222 li
20.0726 -220.282 li
19.5326 -219.862 li
19.0526 -219.322 li
19.1125 -219.382 li
18.7526 -218.782 li
18.4526 -218.062 li
18.4526 -218.122 li
18.2126 -217.282 li
18.1526 -216.442 li
f
19.8326 -220.702 mo
20.4926 -220.942 li
20.6125 -220.462 li
20.6725 -220.462 li
20.0126 -220.222 li
f
21.0926 -221.062 mo
21.3326 -221.122 li
21.4526 -220.642 li
21.2126 -220.582 li
f
20.4926 -220.942 mo
20.6126 -220.462 li
21.2126 -220.582 li
21.0926 -221.062 li
f
21.1526 -220.822 mo
21.8126 -220.702 li
23.2845 -220.316 24.1566 -218.756 24.3326 -217.342 cv
24.3926 -216.502 li
21.1526 -216.502 li
21.1526 -220.822 li
ef
21.2126 -221.062 mo
20.9725 -221.062 li
20.9125 -220.582 li
21.1525 -220.582 li
f
21.2126 -221.062 mo
21.8726 -220.942 li
21.9326 -220.882 li
22.5325 -220.642 li
22.5925 -220.642 li
23.1926 -220.222 li
23.1926 -220.162 li
23.6725 -219.622 li
23.7325 -219.622 li
24.0925 -219.022 li
24.0925 -218.962 li
24.3926 -218.242 li
23.9125 -218.122 li
23.9725 -218.062 li
23.6725 -218.782 li
23.3126 -219.382 li
23.3126 -219.322 li
22.8326 -219.862 li
22.8926 -219.802 li
22.2925 -220.222 li
22.3525 -220.222 li
21.7526 -220.462 li
21.8126 -220.462 li
21.1525 -220.582 li
f
24.3926 -218.242 mo
24.5726 -217.402 li
24.5726 -217.342 li
24.0925 -217.282 li
23.9125 -218.122 li
f
24.6326 -216.502 mo
24.6326 -216.262 li
24.1526 -216.202 li
24.1526 -216.442 li
f
24.5726 -217.342 mo
24.0926 -217.282 li
24.1526 -216.442 li
24.6326 -216.502 li
f
17.6726 -216.262 mo
17.9126 -216.262 li
17.9126 -216.742 li
17.6726 -216.742 li
cp
f
17.9126 -216.262 mo
24.6326 -216.262 li
24.6326 -216.742 li
17.9126 -216.742 li
cp
f
20.0726 -217.582 mo
22.2326 -217.582 li
22.2326 -224.062 li
20.0726 -224.062 li
cp
f
20.0726 -223.822 mo
22.4727 -223.822 li
22.4727 -224.302 li
20.0726 -224.302 li
cp
f
21.9926 -217.342 mo
22.4726 -217.342 li
22.4726 -224.062 li
21.9926 -224.062 li
cp
f
19.8326 -217.342 mo
22.2326 -217.342 li
22.2326 -217.822 li
19.8326 -217.822 li
cp
f
19.8326 -217.582 mo
20.3126 -217.582 li
20.3126 -224.302 li
19.8326 -224.302 li
cp
f
11.7926 -211.702 mo
11.9126 -212.302 li
12.2646 -213.813 13.8506 -214.628 15.2726 -214.822 cv
16.1125 -214.942 li
16.1125 -211.702 li
11.7926 -211.702 li
ef
11.5526 -211.762 mo
11.4926 -211.522 li
11.9726 -211.402 li
12.0326 -211.642 li
f
11.5526 -211.762 mo
11.6726 -212.362 li
11.9126 -213.022 li
11.9726 -213.082 li
12.3926 -213.622 li
12.3926 -213.682 li
12.8726 -214.162 li
12.9326 -214.162 li
13.5926 -214.522 li
13.6526 -214.522 li
14.3726 -214.822 li
14.3726 -214.882 li
14.4926 -214.402 li
14.5526 -214.402 li
13.8326 -214.102 li
13.1726 -213.742 li
13.2326 -213.802 li
12.7526 -213.322 li
12.3326 -212.782 li
12.3926 -212.842 li
12.1526 -212.182 li
12.1526 -212.242 li
12.0326 -211.642 li
f
14.3726 -214.882 mo
15.2126 -215.062 li
15.2726 -215.062 li
15.3326 -214.582 li
14.4926 -214.402 li
f
16.1126 -215.182 mo
16.3526 -215.182 li
16.4126 -214.702 li
16.1726 -214.702 li
f
15.2726 -215.062 mo
15.3326 -214.582 li
16.1725 -214.702 li
16.1125 -215.182 li
f
16.1126 -208.462 mo
15.2726 -208.522 li
13.7326 -208.771 12.3916 -209.455 11.9126 -211.042 cv
11.7926 -211.702 li
16.1126 -211.702 li
16.1126 -208.462 li
ef
16.1126 -208.222 mo
16.3526 -208.222 li
16.4126 -208.702 li
16.1726 -208.702 li
f
16.1126 -208.222 mo
15.2726 -208.282 li
13.9786 -208.47 12.5946 -209.011 11.9726 -210.262 cv
11.9726 -210.322 li
12.3926 -210.502 li
12.3926 -210.562 li
12.8126 -209.962 li
12.7526 -210.022 li
13.2326 -209.542 li
13.1726 -209.542 li
13.8326 -209.182 li
14.5526 -208.882 li
14.4926 -208.942 li
15.3326 -208.762 li
16.1726 -208.702 li
f
11.9726 -210.322 mo
11.7325 -210.922 li
11.6725 -210.982 li
12.1526 -211.042 li
12.1526 -211.102 li
12.3926 -210.502 li
f
11.5526 -211.642 mo
11.5526 -211.882 li
12.0326 -211.942 li
12.0326 -211.702 li
f
11.6726 -210.982 mo
12.1526 -211.042 li
12.0326 -211.702 li
11.5526 -211.642 li
f
15.8726 -214.942 mo
16.3526 -214.942 li
16.3526 -215.182 li
15.8726 -215.182 li
cp
f
15.8726 -208.222 mo
16.3526 -208.222 li
16.3526 -214.942 li
15.8726 -214.942 li
cp
f
8.55261 -210.622 mo
15.0326 -210.622 li
15.0326 -212.782 li
8.55261 -212.782 li
cp
f
8.55261 -212.542 mo
15.2726 -212.542 li
15.2726 -213.022 li
8.55261 -213.022 li
cp
f
14.7926 -210.382 mo
15.2726 -210.382 li
15.2726 -212.782 li
14.7926 -212.782 li
cp
f
8.31262 -210.382 mo
15.0326 -210.382 li
15.0326 -210.862 li
8.31262 -210.862 li
cp
f
8.31262 -210.622 mo
8.7926 -210.622 li
8.7926 -213.022 li
8.31262 -213.022 li
cp
f
gsave
-434.367 -.321899 mo
-396.327 -.321899 li
-396.327 37.6581 li
-434.367 37.6581 li
cp
eclp
-433.347 36.6381 mo
-397.347 36.6381 li
-397.347 .638092 li
-433.347 .638092 li
cp
.895628 .7673 0 0 cmyk
f
-433.347 .878113 mo
-397.107 .878113 li
-397.107 .398102 li
-433.347 .398102 li
cp
f
-397.587 36.8781 mo
-397.107 36.8781 li
-397.107 .638123 li
-397.587 .638123 li
cp
f
-433.587 36.8781 mo
-397.347 36.8781 li
-397.347 36.3981 li
-433.587 36.3981 li
cp
f
-433.587 36.6381 mo
-433.107 36.6381 li
-433.107 .398102 li
-433.587 .398102 li
cp
f
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: HIBBAA+TimesLTStd-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BEHKNV+TimesLTStd-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73D300B27356F88D686B27385AC43A85090F3BFAE9FCE
492F9B6877301F2BBD9ECAFCA1F314C1809DA0F4FE5D44C5803120ED4219ACF5
9340424CF41593B22A3E4E1D30842161D8AA2DBA3BD80F7B6AA653909D5B0707
6E664604D97C4D7B9C7309A46E4A66EE37D5E348C6127BF8D0D66F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BEHKNV+TimesLTStd-Bold /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/BEHKNV+TimesLTStd-Bold*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 3{/.notdef}rp /five /six 10{/.notdef}rp 
/A /.notdef /C 8{/.notdef}rp /L /.notdef /N 18{/.notdef}rp 
/a /.notdef /c /.notdef /e /.notdef /g /.notdef 
/i /.notdef /k /.notdef /m /n /o /p 
/.notdef /r /s /t /.notdef /v /w 136{/.notdef}rp]
BEHKNV+TimesLTStd-Bold nf
BEHKNV+TimesLTStd-Bold*1 [24 0 0 -24 0 0 ]msf
-428.067 25.6581 mo
(16)
[12 0 ]xsh
grestore
.632599 36.6381 mo
36.6326 36.6381 li
36.6326 .638092 li
.632599 .638092 li
cp
.895628 .7673 0 0 cmyk
f
.632599 1.1781 mo
37.1726 1.1781 li
37.1726 .158112 li
.632599 .158112 li
cp
f
36.1526 37.1781 mo
37.1726 37.1781 li
37.1726 .638092 li
36.1526 .638092 li
cp
f
.152618 37.1781 mo
36.6326 37.1781 li
36.6326 36.1581 li
.152618 36.1581 li
cp
f
.152618 36.6381 mo
1.17261 36.6381 li
1.17261 .158081 li
.152618 .158081 li
cp
f
gsave
4.2926 4.2381 mo
33.0926 4.2381 li
33.0926 33.0381 li
4.2926 33.0381 li
cp
eclp
4.2926 33.0381 mo
33.0926 33.0381 li
33.0926 4.23813 li
4.2926 4.23813 li
cp
1 /0 /CSD get_res sepcs
.504 sep
f
4.2926 4.77811 mo
33.0926 4.77811 li
33.0926 4.2081 li
4.2926 4.2081 li
cp
f
32.6126 33.0681 mo
33.0926 33.0681 li
33.0926 4.23813 li
32.6126 4.23813 li
cp
f
4.2326 33.0681 mo
33.0926 33.0681 li
33.0926 32.5581 li
4.2326 32.5581 li
cp
f
4.2326 33.0381 mo
4.83261 33.0381 li
4.83261 4.20813 li
4.2326 4.20813 li
cp
f
grestore
7.89258 29.4381 mo
29.4926 29.4381 li
29.4926 7.8381 li
7.89258 7.8381 li
cp
f
7.89258 8.37811 mo
30.0326 8.37811 li
30.0326 7.35812 li
7.89258 7.35812 li
cp
f
29.0126 29.9781 mo
30.0327 29.9781 li
30.0327 7.83807 li
29.0126 7.83807 li
cp
f
7.4126 29.9781 mo
29.4926 29.9781 li
29.4926 28.9581 li
7.4126 28.9581 li
cp
f
7.4126 29.4381 mo
8.43262 29.4381 li
8.43262 7.35812 li
7.4126 7.35812 li
cp
f
14.7926 16.9581 mo
14.7926 16.6581 li
14.7325 16.3581 li
14.0066 12.9891 9.20856 13.2591 8.8526 16.6581 cv
8.7926 16.9581 li
8.8526 17.2581 li
9.20856 20.6571 14.0066 20.9271 14.7325 17.5581 cv
14.7926 17.2581 li
14.7926 16.9581 li
1 /0 /CSD get_res sepcs
0 sep
ef
14.3126 16.9581 mo
14.3126 16.6581 li
14.3126 16.7781 li
14.2526 16.4781 li
14.1926 16.1781 li
14.2526 16.2981 li
14.1326 16.0581 li
14.0726 15.9981 li
13.9526 15.6981 li
14.0126 15.7581 li
13.8926 15.5181 li
13.8926 15.5781 li
13.7126 15.3381 li
13.7726 15.3981 li
13.3526 14.9781 li
13.4726 15.0981 li
13.2326 14.9781 li
13.1726 14.9181 li
12.9326 14.7381 li
12.9926 14.7981 li
12.7526 14.6781 li
12.8126 14.6781 li
12.5126 14.5581 li
12.6326 14.6181 li
12.0326 14.4981 li
12.0926 14.4981 li
11.4926 14.4981 li
11.6126 14.4981 li
11.0126 14.6181 li
11.1326 14.5581 li
10.6526 14.7981 li
10.7126 14.7981 li
10.4126 14.9781 li
10.4126 14.9181 li
10.2326 15.0381 li
10.2926 14.9781 li
9.87262 15.3981 li
9.93262 15.3381 li
9.57257 15.8181 li
9.63257 15.6981 li
9.51257 15.9981 li
9.51257 15.9381 li
9.45258 16.1781 li
9.45258 16.2381 li
9.33258 16.5381 li
9.39258 16.3581 li
9.39258 16.7781 li
9.33258 17.0781 li
9.33258 16.8981 li
9.39258 17.1981 li
9.39258 17.5581 li
9.33258 17.3781 li
9.45258 17.6781 li
9.45258 17.7381 li
9.51257 17.9781 li
9.51257 17.9181 li
9.63257 18.2181 li
9.57257 18.0981 li
9.93262 18.5781 li
9.87262 18.5181 li
10.2926 18.9381 li
10.2326 18.8781 li
9.69257 19.7181 li
9.57257 19.6581 li
9.23761 19.3451 8.58661 18.6891 8.55261 18.2181 cv
8.49261 17.9781 li
8.49261 18.0381 li
8.37262 17.7381 li
8.37262 17.2581 li
8.37262 17.3781 li
8.31262 17.0781 li
8.31262 16.8981 li
8.37262 16.5981 li
8.37262 16.6581 li
8.37262 16.1781 li
8.49261 15.8781 li
8.49261 15.9381 li
8.55261 15.6981 li
8.55261 15.6381 li
8.8576 14.7831 9.60358 14.1461 10.4126 13.7781 cv
10.6526 13.6581 li
10.8326 13.5981 li
11.6846 13.3791 12.7276 13.4051 13.4726 13.8981 cv
13.5326 13.8981 li
13.7726 14.0781 li
13.7126 14.0781 li
14.0726 14.2581 li
14.5526 14.7381 li
14.7326 14.9781 li
14.7926 15.0381 li
14.9126 15.2781 li
14.9126 15.3381 li
15.0326 15.6381 li
15.0326 15.5781 li
15.1526 15.8181 li
15.2126 15.9981 li
15.2726 16.2981 li
15.3326 16.5981 li
15.3326 16.9581 li
f
10.2326 18.8781 mo
10.4126 18.9981 li
10.7126 19.1781 li
10.6526 19.1781 li
11.1326 19.4181 li
11.0126 19.3581 li
11.6125 19.4781 li
11.4926 19.4781 li
12.0926 19.4781 li
12.0326 19.4781 li
12.6326 19.3581 li
12.5126 19.3581 li
12.8126 19.2381 li
12.7526 19.2981 li
12.9926 19.1781 li
12.9326 19.1781 li
13.1725 18.9981 li
13.2326 18.9981 li
13.4726 18.8781 li
13.3526 18.9381 li
13.7726 18.5181 li
13.7126 18.5781 li
13.8926 18.3381 li
13.8926 18.3981 li
14.0126 18.1581 li
13.9526 18.2181 li
14.0726 17.9181 li
14.1326 17.8581 li
14.2526 17.6181 li
14.1926 17.7981 li
14.2526 17.4981 li
14.3126 17.1981 li
14.3126 17.2581 li
14.3126 16.9581 li
15.3326 16.9581 li
15.3326 17.3781 li
15.2726 17.6781 li
15.2126 17.9781 li
15.1526 18.0981 li
15.0326 18.3381 li
15.0326 18.2781 li
14.9126 18.5781 li
14.9156 18.9021 14.1556 19.5601 13.9526 19.7781 cv
13.7126 19.8981 li
13.7726 19.8381 li
13.5326 20.0181 li
13.4726 20.0781 li
13.0005 20.2841 12.7436 20.4251 12.2126 20.4981 cv
11.7926 20.4981 li
11.4606 20.5421 10.6776 20.3871 10.4126 20.1981 cv
10.1725 20.0781 li
9.87256 19.8981 li
9.87256 19.8381 li
9.69257 19.7181 li
f
12.7526 20.0181 mo
14.3726 23.2581 li
15.6926 22.7181 li
14.0126 19.3581 li
ef
12.8726 19.9581 mo
14.4926 23.1981 li
14.4326 23.3781 li
14.3126 23.1381 li
15.6326 22.5981 li
15.8126 22.6581 li
15.5726 22.7781 li
13.8926 19.4181 li
13.9526 19.2381 li
14.0726 19.1781 li
15.8726 22.7781 li
15.7526 22.8381 li
14.4326 23.3781 li
14.3126 23.4381 li
12.6326 20.0781 li
f
14.0726 19.4781 mo
12.8126 20.1381 li
12.6326 20.0781 li
12.5726 19.9581 li
12.6926 19.8981 li
13.9526 19.2381 li
f
20.1926 16.7181 mo
20.1326 16.4181 li
19.9526 16.1181 li
19.6526 15.9381 li
19.3526 15.8781 li
18.9926 15.9381 li
18.7526 16.1181 li
18.5726 16.4181 li
18.5126 16.7181 li
18.5726 17.0781 li
18.8876 17.6501 19.4726 17.6981 19.9526 17.3181 cv
20.1326 17.0781 li
20.1926 16.7181 li
ef
20.0726 16.7781 mo
20.0126 16.4781 li
20.0726 16.4781 li
19.8926 16.1781 li
19.8926 16.2381 li
19.5926 16.0581 li
19.6526 16.0581 li
19.3526 15.9981 li
19.4126 15.9981 li
19.0526 16.0581 li
18.8126 16.2381 li
18.8726 16.1781 li
18.6926 16.4781 li
18.6326 16.7781 li
18.6326 16.7181 li
18.6926 17.0781 li
18.6926 17.0181 li
18.8726 17.2581 li
18.8126 17.2581 li
19.0526 17.4381 li
19.0526 17.3781 li
19.4126 17.4381 li
19.3526 17.4381 li
19.6526 17.3781 li
19.5926 17.4381 li
19.8926 17.2581 li
20.0726 17.0181 li
20.0126 17.0781 li
20.0726 16.7181 li
20.3126 16.7781 li
20.2526 17.1381 li
20.0726 17.3781 li
20.0126 17.4381 li
19.7126 17.6181 li
19.4126 17.6781 li
19.3526 17.6781 li
18.9926 17.6181 li
18.9326 17.6181 li
18.6926 17.4381 li
18.6926 17.3781 li
18.5126 17.1381 li
18.4526 17.1381 li
18.3926 16.7781 li
18.4046 16.2671 18.8556 15.6981 19.4126 15.7581 cv
19.7126 15.8181 li
19.7126 15.8781 li
20.0126 16.0581 li
20.0726 16.0581 li
20.2526 16.3581 li
20.2526 16.4181 li
20.3126 16.7181 li
f
20.0726 16.7181 mo
20.0726 16.7781 li
20.3126 16.7181 li
20.3126 16.7781 li
f
16.4126 15.5781 mo
16.2925 15.5781 li
16.2325 15.8181 li
16.3525 15.8181 li
f
17.6726 15.8181 mo
17.7926 15.8181 li
17.7326 16.0581 li
17.6125 16.0581 li
f
16.4126 15.5781 mo
16.3525 15.8181 li
17.6125 16.0581 li
17.6725 15.8181 li
f
16.2926 17.0781 mo
16.1725 17.0781 li
16.2325 17.3181 li
16.3526 17.3181 li
f
17.6726 16.8981 mo
17.7926 16.8981 li
17.8526 17.1381 li
17.7326 17.1381 li
f
16.2926 17.0781 mo
16.3526 17.3181 li
17.7325 17.1381 li
17.6725 16.8981 li
f
28.6526 16.9581 mo
28.5925 16.6581 li
28.5925 16.3581 li
27.6885 12.9531 23.0906 13.2761 22.6526 16.6581 cv
22.6526 17.2581 li
23.0906 20.6401 27.6885 20.9631 28.5925 17.5581 cv
28.5925 17.2581 li
28.6526 16.9581 li
ef
28.1726 17.0781 mo
28.1125 16.7781 li
28.1125 16.3581 li
28.1125 16.5381 li
27.9926 16.2381 li
27.9926 16.1781 li
27.9326 15.9381 li
27.9326 15.9981 li
27.8126 15.6981 li
27.8726 15.8181 li
27.5126 15.3381 li
27.5726 15.3981 li
27.1526 14.9781 li
27.2726 15.0381 li
27.0926 14.9181 li
27.0926 14.9781 li
26.7926 14.7981 li
26.5526 14.6781 li
26.6125 14.6781 li
26.3126 14.5581 li
26.3726 14.5581 li
26.1326 14.4981 li
26.1926 14.5581 li
25.8926 14.4981 li
25.9526 14.4981 li
25.2926 14.4981 li
25.4126 14.4981 li
25.1125 14.5581 li
25.1125 14.4981 li
24.8726 14.5581 li
24.9326 14.5581 li
24.6326 14.6781 li
24.6926 14.6781 li
24.4526 14.7981 li
24.5126 14.7381 li
24.2726 14.9181 li
24.2126 14.9781 li
23.9726 15.0981 li
24.0926 14.9781 li
23.6726 15.3981 li
23.7326 15.3381 li
23.5526 15.5781 li
23.6125 15.5181 li
23.4926 15.7581 li
23.4926 15.8181 li
23.3126 16.1181 li
23.3126 15.9381 li
23.2526 16.1781 li
23.3126 16.1781 li
23.2526 16.4781 li
23.1926 16.7781 li
23.1926 16.6581 li
23.1926 17.2581 li
23.1926 17.1981 li
23.2526 17.4981 li
23.3126 17.7981 li
23.2526 17.7381 li
23.3126 17.9781 li
23.3126 17.8581 li
23.4926 18.1581 li
23.6125 18.3981 li
23.5526 18.3381 li
23.7326 18.5781 li
23.6726 18.5181 li
24.0926 18.9381 li
23.9726 18.8781 li
23.4926 19.7781 li
22.8926 19.1781 li
22.7126 18.9381 li
22.7126 18.8781 li
22.5926 18.6381 li
22.5926 18.6981 li
22.4126 18.3981 li
22.3526 18.2181 li
22.1826 17.5981 22.0836 16.9331 22.2326 16.2981 cv
22.2926 15.9981 li
22.2926 15.9381 li
22.3526 15.6981 li
22.4126 15.5781 li
22.5926 15.2781 li
22.7126 15.0381 li
22.7126 14.9781 li
22.8926 14.7381 li
23.3726 14.2581 li
23.7326 14.0781 li
23.6726 14.0781 li
23.9126 13.8981 li
23.9726 13.8981 li
24.6886 13.4171 25.7966 13.3661 26.6125 13.5981 cv
26.6726 13.5981 li
26.9726 13.7181 li
27.0326 13.7781 li
27.2726 13.8981 li
27.3326 13.8981 li
27.6326 14.0781 li
27.8126 14.1981 li
28.1125 14.4981 li
28.3126 14.6651 28.6746 15.1241 28.7726 15.3381 cv
28.8926 15.6381 li
28.8926 15.6981 li
28.9526 15.9381 li
28.9526 15.8781 li
29.0726 16.1781 li
29.1326 16.3581 li
29.1326 16.6581 li
29.1326 16.5981 li
29.1926 16.8981 li
f
23.9726 18.8781 mo
24.2126 18.9981 li
24.2726 18.9981 li
24.5126 19.1781 li
24.4526 19.1781 li
24.6926 19.2981 li
24.6326 19.2381 li
24.9326 19.3581 li
24.8726 19.3581 li
25.1125 19.4181 li
25.4125 19.4781 li
25.2925 19.4781 li
25.9526 19.4781 li
25.8926 19.4781 li
26.1926 19.4181 li
26.1326 19.4181 li
26.3726 19.3581 li
26.3126 19.3581 li
26.6125 19.2381 li
26.5526 19.2981 li
26.7925 19.1781 li
27.0926 18.9981 li
27.2726 18.8781 li
27.1526 18.9381 li
27.5726 18.5181 li
27.5126 18.5781 li
27.8726 18.0981 li
27.8126 18.2181 li
27.9326 17.9181 li
27.9326 17.9781 li
27.9926 17.7381 li
27.9926 17.6781 li
28.1125 17.3781 li
28.1125 17.5581 li
28.1125 17.1981 li
28.1725 16.8981 li
28.1725 17.0781 li
29.1926 16.8981 li
29.1926 17.0781 li
29.1326 17.3781 li
29.1326 17.2581 li
29.1326 17.5581 li
29.0726 17.7381 li
28.9526 18.0381 li
28.9526 17.9781 li
28.8926 18.2181 li
28.8466 18.7271 28.1666 19.3791 27.8126 19.7181 cv
27.6326 19.8381 li
27.6326 19.8981 li
27.3326 20.0781 li
27.2726 20.0781 li
27.0326 20.1981 li
26.9726 20.1981 li
26.6725 20.3181 li
26.6125 20.3181 li
26.3726 20.3781 li
26.3726 20.4381 li
26.0726 20.4981 li
25.2325 20.4981 li
24.9326 20.4381 li
24.8726 20.3781 li
24.6326 20.3181 li
24.5726 20.3181 li
24.2726 20.1981 li
24.2126 20.1981 li
23.9726 20.0781 li
23.9125 20.0181 li
23.6725 19.8381 li
23.7325 19.8981 li
23.4926 19.7781 li
f
24.6926 20.0181 mo
23.0726 23.2581 li
21.7526 22.7181 li
23.4326 19.3581 li
ef
24.8126 20.0781 mo
23.1326 23.4381 li
23.0126 23.3781 li
21.6926 22.8381 li
21.5726 22.7781 li
23.3726 19.1781 li
23.4926 19.2381 li
23.5526 19.4181 li
21.8726 22.7781 li
21.6326 22.6581 li
21.8126 22.5981 li
23.1326 23.1381 li
23.0126 23.3781 li
22.9526 23.1981 li
24.5726 19.9581 li
f
23.4926 19.2381 mo
24.7526 19.8981 li
24.8726 19.9581 li
24.8126 20.0781 li
24.6326 20.1381 li
23.3726 19.4781 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BEHKNW+HelveticaLT*1 uf
/BEHKNW+HelveticaLT uf
/QJJAAA+HelveticaLT uf
/BEHKNU+NewCenturySchlbkLT-BoldItalic*1 uf
/BEHKNU+NewCenturySchlbkLT-BoldItalic uf
/PBAAAA+NewCenturySchlbkLT-BoldItalic uf
/BEHKNV+TimesLTStd-Bold*1 uf
/BEHKNV+TimesLTStd-Bold uf
/HIBBAA+TimesLTStd-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
